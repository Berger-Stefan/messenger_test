
messenger_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000724c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800760c  0800760c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007614  08007614  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bd4  20000060  08007684  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c34  08007684  00024c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002048b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb8  00000000  00000000  0004055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  00044418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012cd  00000000  00000000  00045c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007fd9  00000000  00000000  00046f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a0b  00000000  00000000  0004ef0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea1d8  00000000  00000000  00068919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007038  00000000  00000000  00152af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00159b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007404 	.word	0x08007404

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007404 	.word	0x08007404

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_ZN9MessengerC1Ettm>:
private:
    uint64_t data; // Use a 64-bit integer

public:
    // Constructor (optional for initialization)
    Messenger(uint16_t targetTaskId = 0, uint16_t payloadId = 0, uint32_t payload = 0) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	817b      	strh	r3, [r7, #10]
 80005ba:	4613      	mov	r3, r2
 80005bc:	813b      	strh	r3, [r7, #8]
        set_target_task_id(targetTaskId);
 80005be:	897b      	ldrh	r3, [r7, #10]
 80005c0:	4619      	mov	r1, r3
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f000 f80e 	bl	80005e4 <_ZN9Messenger18set_target_task_idEt>
        set_payload_id(payloadId);
 80005c8:	893b      	ldrh	r3, [r7, #8]
 80005ca:	4619      	mov	r1, r3
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f000 f82d 	bl	800062c <_ZN9Messenger14set_payload_idEt>
        set_payload(payload);
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f000 f84c 	bl	8000672 <_ZN9Messenger11set_payloadEm>
    }
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_ZN9Messenger18set_target_task_idEt>:

    Messenger();

    void set_target_task_id(uint16_t targetTaskId) {
 80005e4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	460b      	mov	r3, r1
 80005f0:	807b      	strh	r3, [r7, #2]
        data = (data & ~0xFFFF000000000000ULL) | (uint64_t(targetTaskId) << 48);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f8:	4614      	mov	r4, r2
 80005fa:	b29d      	uxth	r5, r3
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	2200      	movs	r2, #0
 8000600:	469a      	mov	sl, r3
 8000602:	4693      	mov	fp, r2
 8000604:	f04f 0200 	mov.w	r2, #0
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8000610:	2200      	movs	r2, #0
 8000612:	ea44 0802 	orr.w	r8, r4, r2
 8000616:	ea45 0903 	orr.w	r9, r5, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	e9c3 8900 	strd	r8, r9, [r3]
    }
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800062a:	4770      	bx	lr

0800062c <_ZN9Messenger14set_payload_idEt>:

    void set_payload_id(uint16_t payloadId) {
 800062c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	8079      	strh	r1, [r7, #2]
        data = (data & ~0x0000FFFF00000000ULL) | (uint64_t(payloadId) << 32);
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800063e:	4602      	mov	r2, r0
 8000640:	0c0b      	lsrs	r3, r1, #16
 8000642:	041b      	lsls	r3, r3, #16
 8000644:	8879      	ldrh	r1, [r7, #2]
 8000646:	2000      	movs	r0, #0
 8000648:	4688      	mov	r8, r1
 800064a:	4681      	mov	r9, r0
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	4641      	mov	r1, r8
 8000656:	2000      	movs	r0, #0
 8000658:	ea42 0400 	orr.w	r4, r2, r0
 800065c:	ea43 0501 	orr.w	r5, r3, r1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	e9c3 4500 	strd	r4, r5, [r3]
    }
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000670:	4770      	bx	lr

08000672 <_ZN9Messenger11set_payloadEm>:

    void set_payload(uint32_t payload) {
 8000672:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
        data = (data & ~0x00000000FFFFFFFFULL) | payload;
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000684:	2200      	movs	r2, #0
 8000686:	460b      	mov	r3, r1
 8000688:	6839      	ldr	r1, [r7, #0]
 800068a:	2000      	movs	r0, #0
 800068c:	460c      	mov	r4, r1
 800068e:	4605      	mov	r5, r0
 8000690:	ea42 0804 	orr.w	r8, r2, r4
 8000694:	ea43 0905 	orr.w	r9, r3, r5
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	e9c3 8900 	strd	r8, r9, [r3]
    }
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80006a8:	4770      	bx	lr

080006aa <_ZNK9Messenger18get_target_task_idEv>:

    uint16_t get_target_task_id() const {
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
        return (data >> 48) & 0xFFFF;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	0c0a      	lsrs	r2, r1, #16
 80006c2:	2300      	movs	r3, #0
 80006c4:	b293      	uxth	r3, r2
    }
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZNK9Messenger14get_payload_idEv>:

    uint16_t get_payload_id() const {
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
        return (data >> 32) & 0xFFFF;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	000a      	movs	r2, r1
 80006ea:	2300      	movs	r3, #0
 80006ec:	b293      	uxth	r3, r2
    }
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_ZNK9Messenger11get_payloadEv>:

    uint32_t get_payload() const {
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
        return data & 0xFFFFFFFF;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000708:	4613      	mov	r3, r2
    }
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800073c:	d205      	bcs.n	800074a <_ZSt16__deque_buf_sizej+0x1c>
 800073e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	fbb2 f3f3 	udiv	r3, r2, r3
 8000748:	e000      	b.n	800074c <_ZSt16__deque_buf_sizej+0x1e>
 800074a:	2301      	movs	r3, #1
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <_Z7myPrintPc>:
void StartTask02(void *argument);
void StartMessenger(void *argument);

/* USER CODE BEGIN PFP */

void myPrint(char *message) {
 8000758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800075c:	b087      	sub	sp, #28
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	uint8_t uintArray[length + 1];
	for (size_t i = 0; i <= length; i++) {
		uintArray[i] = (uint8_t)message[i];
	}
	HAL_UART_Transmit(&huart2, uintArray, sizeof(uintArray), 100);
}
 8000762:	466b      	mov	r3, sp
 8000764:	461e      	mov	r6, r3
	size_t length = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
	while (message[length] != '\0') {
 800076a:	e002      	b.n	8000772 <_Z7myPrintPc+0x1a>
		length++;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
	while (message[length] != '\0') {
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f6      	bne.n	800076c <_Z7myPrintPc+0x14>
	uint8_t uintArray[length + 1];
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1c59      	adds	r1, r3, #1
 8000782:	460b      	mov	r3, r1
 8000784:	3b01      	subs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	2300      	movs	r3, #0
 800078a:	4688      	mov	r8, r1
 800078c:	4699      	mov	r9, r3
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800079a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800079e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007a2:	2300      	movs	r3, #0
 80007a4:	460c      	mov	r4, r1
 80007a6:	461d      	mov	r5, r3
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	00eb      	lsls	r3, r5, #3
 80007b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007b6:	00e2      	lsls	r2, r4, #3
 80007b8:	1dcb      	adds	r3, r1, #7
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	ebad 0d03 	sub.w	sp, sp, r3
 80007c2:	466b      	mov	r3, sp
 80007c4:	3300      	adds	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
	for (size_t i = 0; i <= length; i++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	e00b      	b.n	80007e6 <_Z7myPrintPc+0x8e>
		uintArray[i] = (uint8_t)message[i];
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	7818      	ldrb	r0, [r3, #0]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	4413      	add	r3, r2
 80007dc:	4602      	mov	r2, r0
 80007de:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i <= length; i++) {
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	3301      	adds	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d9ef      	bls.n	80007ce <_Z7myPrintPc+0x76>
	HAL_UART_Transmit(&huart2, uintArray, sizeof(uintArray), 100);
 80007ee:	b28a      	uxth	r2, r1
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <_Z7myPrintPc+0xb0>)
 80007f6:	f002 ffd8 	bl	80037aa <HAL_UART_Transmit>
 80007fa:	46b5      	mov	sp, r6
}
 80007fc:	bf00      	nop
 80007fe:	371c      	adds	r7, #28
 8000800:	46bd      	mov	sp, r7
 8000802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000806:	bf00      	nop
 8000808:	2000007c 	.word	0x2000007c

0800080c <main>:

/*
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000810:	f001 fb94 	bl	8001f3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000814:	f000 f842 	bl	800089c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000818:	f000 f8f0 	bl	80009fc <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800081c:	f000 f8c0 	bl	80009a0 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000820:	f003 fb7c 	bl	8003f1c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <main+0x60>)
 8000826:	2100      	movs	r1, #0
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <main+0x64>)
 800082a:	f003 fbc1 	bl	8003fb0 <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <main+0x68>)
 8000832:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTask01 */
	myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <main+0x6c>)
 8000836:	2100      	movs	r1, #0
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <main+0x70>)
 800083a:	f003 fbb9 	bl	8003fb0 <osThreadNew>
 800083e:	4603      	mov	r3, r0
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <main+0x74>)
 8000842:	6013      	str	r3, [r2, #0]

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <main+0x78>)
 8000846:	2100      	movs	r1, #0
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <main+0x7c>)
 800084a:	f003 fbb1 	bl	8003fb0 <osThreadNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <main+0x80>)
 8000852:	6013      	str	r3, [r2, #0]

	/* creation of messeger */
	messengerHandle = osThreadNew(StartMessenger, NULL, &messenger_attributes);
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <main+0x84>)
 8000856:	2100      	movs	r1, #0
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <main+0x88>)
 800085a:	f003 fba9 	bl	8003fb0 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <main+0x8c>)
 8000862:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000864:	f003 fb7e 	bl	8003f64 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000868:	e7fe      	b.n	8000868 <main+0x5c>
 800086a:	bf00      	nop
 800086c:	08007530 	.word	0x08007530
 8000870:	08000ad9 	.word	0x08000ad9
 8000874:	200000c0 	.word	0x200000c0
 8000878:	08007554 	.word	0x08007554
 800087c:	08000ae9 	.word	0x08000ae9
 8000880:	200000c4 	.word	0x200000c4
 8000884:	08007578 	.word	0x08007578
 8000888:	08000b25 	.word	0x08000b25
 800088c:	200000c8 	.word	0x200000c8
 8000890:	0800759c 	.word	0x0800759c
 8000894:	08000bf1 	.word	0x08000bf1
 8000898:	200000cc 	.word	0x200000cc

0800089c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2234      	movs	r2, #52	; 0x34
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 f9a8 	bl	8006c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <_Z18SystemClock_Configv+0xfc>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a33      	ldr	r2, [pc, #204]	; (8000998 <_Z18SystemClock_Configv+0xfc>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <_Z18SystemClock_Configv+0xfc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <_Z18SystemClock_Configv+0x100>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a2d      	ldr	r2, [pc, #180]	; (800099c <_Z18SystemClock_Configv+0x100>)
 80008e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <_Z18SystemClock_Configv+0x100>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800090c:	2308      	movs	r3, #8
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000910:	23b4      	movs	r3, #180	; 0xb4
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4618      	mov	r0, r3
 8000926:	f002 f9a7 	bl	8002c78 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800093a:	f000 f9ab 	bl	8000c94 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800093e:	f001 fdcf 	bl	80024e0 <HAL_PWREx_EnableOverDrive>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 8000952:	f000 f99f 	bl	8000c94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000962:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000966:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2105      	movs	r1, #5
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fe03 	bl	8002580 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800098a:	f000 f983 	bl	8000c94 <Error_Handler>
	}
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80009a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009d8:	f002 fe9a 	bl	8003710 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf14      	ite	ne
 80009e2:	2301      	movne	r3, #1
 80009e4:	2300      	moveq	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 80009ec:	f000 f952 	bl	8000c94 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000007c 	.word	0x2000007c
 80009f8:	40004400 	.word	0x40004400

080009fc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a25      	ldr	r2, [pc, #148]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_ZL12MX_GPIO_Initv+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a88:	f001 fd10 	bl	80024ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000aa4:	f001 fb6e 	bl	8002184 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ac0:	f001 fb60 	bl	8002184 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f003 faf7 	bl	80040d4 <osDelay>
 8000ae6:	e7fb      	b.n	8000ae0 <_Z16StartDefaultTaskPv+0x8>

08000ae8 <_Z11StartTask01Pv>:
 * @brief Function implementing the myTask01 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask01 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f003 faee 	bl	80040d4 <osDelay>

		myPrint("Sending message from task 1.\n");
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <_Z11StartTask01Pv+0x34>)
 8000afa:	f7ff fe2d 	bl	8000758 <_Z7myPrintPc>
		// create a message
		Messenger message_from_1(2, 1, 1337);
 8000afe:	f107 0008 	add.w	r0, r7, #8
 8000b02:	f240 5339 	movw	r3, #1337	; 0x539
 8000b06:	2201      	movs	r2, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	f7ff fd4f 	bl	80005ac <_ZN9MessengerC1Ettm>
		// add message to the messenger queue
		messenger_queue.push(message_from_1);
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <_Z11StartTask01Pv+0x38>)
 8000b16:	f000 f8e3 	bl	8000ce0 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE4pushERKS0_>

	}
 8000b1a:	e7e9      	b.n	8000af0 <_Z11StartTask01Pv+0x8>
 8000b1c:	0800744c 	.word	0x0800744c
 8000b20:	20000120 	.word	0x20000120

08000b24 <_Z11StartTask02Pv>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

	uint32_t value_1 = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t value_2 = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
	char buffer[32];

	for (;;) {
		osDelay(100);
 8000b34:	2064      	movs	r0, #100	; 0x64
 8000b36:	f003 facd 	bl	80040d4 <osDelay>

		// Check if gotten a message
		if (!task_2_queue.empty()) {
 8000b3a:	4828      	ldr	r0, [pc, #160]	; (8000bdc <_Z11StartTask02Pv+0xb8>)
 8000b3c:	f000 f8de 	bl	8000cfc <_ZNKSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5emptyEv>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f083 0301 	eor.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f3      	beq.n	8000b34 <_Z11StartTask02Pv+0x10>

			switch (task_2_queue.front().get_payload_id()) {
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <_Z11StartTask02Pv+0xb8>)
 8000b4e:	f000 f8e2 	bl	8000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fdbc 	bl	80006d2 <_ZNK9Messenger14get_payload_idEv>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <_Z11StartTask02Pv+0x42>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d01b      	beq.n	8000b9c <_Z11StartTask02Pv+0x78>
					myPrint("\n");

					break;

				default:
					break;
 8000b64:	e035      	b.n	8000bd2 <_Z11StartTask02Pv+0xae>
					value_1 = task_2_queue.front().get_payload();
 8000b66:	481d      	ldr	r0, [pc, #116]	; (8000bdc <_Z11StartTask02Pv+0xb8>)
 8000b68:	f000 f8d5 	bl	8000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fdc3 	bl	80006fa <_ZNK9Messenger11get_payloadEv>
 8000b74:	62f8      	str	r0, [r7, #44]	; 0x2c
					sprintf(buffer, "%lu", value_1);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b7c:	4918      	ldr	r1, [pc, #96]	; (8000be0 <_Z11StartTask02Pv+0xbc>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f006 f804 	bl	8006b8c <siprintf>
					myPrint("Message received in task 2 with id 0: \t");
 8000b84:	4817      	ldr	r0, [pc, #92]	; (8000be4 <_Z11StartTask02Pv+0xc0>)
 8000b86:	f7ff fde7 	bl	8000758 <_Z7myPrintPc>
					myPrint(buffer);
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fde2 	bl	8000758 <_Z7myPrintPc>
					myPrint("\n");
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <_Z11StartTask02Pv+0xc4>)
 8000b96:	f7ff fddf 	bl	8000758 <_Z7myPrintPc>
					break;
 8000b9a:	e01a      	b.n	8000bd2 <_Z11StartTask02Pv+0xae>
					value_2 = task_2_queue.front().get_payload();
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <_Z11StartTask02Pv+0xb8>)
 8000b9e:	f000 f8ba 	bl	8000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fda8 	bl	80006fa <_ZNK9Messenger11get_payloadEv>
 8000baa:	62b8      	str	r0, [r7, #40]	; 0x28
					sprintf(buffer, "%lu", value_2);
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb2:	490b      	ldr	r1, [pc, #44]	; (8000be0 <_Z11StartTask02Pv+0xbc>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 ffe9 	bl	8006b8c <siprintf>
					myPrint("Message received in task 2 with id 1: \t");
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <_Z11StartTask02Pv+0xc8>)
 8000bbc:	f7ff fdcc 	bl	8000758 <_Z7myPrintPc>
					myPrint(buffer);
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fdc7 	bl	8000758 <_Z7myPrintPc>
					myPrint("\n");
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <_Z11StartTask02Pv+0xc4>)
 8000bcc:	f7ff fdc4 	bl	8000758 <_Z7myPrintPc>
					break;
 8000bd0:	bf00      	nop
			}
		task_2_queue.pop();
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <_Z11StartTask02Pv+0xb8>)
 8000bd4:	f000 f8ac 	bl	8000d30 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE3popEv>
		osDelay(100);
 8000bd8:	e7ac      	b.n	8000b34 <_Z11StartTask02Pv+0x10>
 8000bda:	bf00      	nop
 8000bdc:	200000f8 	.word	0x200000f8
 8000be0:	0800746c 	.word	0x0800746c
 8000be4:	08007470 	.word	0x08007470
 8000be8:	08007498 	.word	0x08007498
 8000bec:	0800749c 	.word	0x0800749c

08000bf0 <_Z14StartMessengerPv>:
 * @brief Function implementing the messenger thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMessager */
void StartMessenger(void *argument) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	char buffer[32];


	for (;;) {
		osDelay(10);
 8000bf8:	200a      	movs	r0, #10
 8000bfa:	f003 fa6b 	bl	80040d4 <osDelay>

		while (!messenger_queue.empty()) {
 8000bfe:	e025      	b.n	8000c4c <_Z14StartMessengerPv+0x5c>

			myPrint("Found message in message queue. \n");
 8000c00:	4817      	ldr	r0, [pc, #92]	; (8000c60 <_Z14StartMessengerPv+0x70>)
 8000c02:	f7ff fda9 	bl	8000758 <_Z7myPrintPc>
//			sprintf(buffer, "%i", messenger_queue.size());
//			myPrint(buffer);
//			myPrint("\n");

			uint16_t target_process_id =
					messenger_queue.front().get_target_task_id();
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <_Z14StartMessengerPv+0x74>)
 8000c08:	f000 f885 	bl	8000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd4b 	bl	80006aa <_ZNK9Messenger18get_target_task_idEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	85fb      	strh	r3, [r7, #46]	; 0x2e

			// Add message to the right task queue
			if (target_process_id == 1) {
 8000c18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d108      	bne.n	8000c30 <_Z14StartMessengerPv+0x40>
				task_1_queue.push(messenger_queue.front());
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <_Z14StartMessengerPv+0x74>)
 8000c20:	f000 f879 	bl	8000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <_Z14StartMessengerPv+0x78>)
 8000c2a:	f000 f859 	bl	8000ce0 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE4pushERKS0_>
 8000c2e:	e00a      	b.n	8000c46 <_Z14StartMessengerPv+0x56>
			} else if (target_process_id == 2) {
 8000c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d107      	bne.n	8000c46 <_Z14StartMessengerPv+0x56>
				task_2_queue.push(messenger_queue.front());
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <_Z14StartMessengerPv+0x74>)
 8000c38:	f000 f86d 	bl	8000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <_Z14StartMessengerPv+0x7c>)
 8000c42:	f000 f84d 	bl	8000ce0 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE4pushERKS0_>
			}

			// Remove the message
			messenger_queue.pop();
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <_Z14StartMessengerPv+0x74>)
 8000c48:	f000 f872 	bl	8000d30 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE3popEv>
		while (!messenger_queue.empty()) {
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <_Z14StartMessengerPv+0x74>)
 8000c4e:	f000 f855 	bl	8000cfc <_ZNKSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5emptyEv>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f083 0301 	eor.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1d0      	bne.n	8000c00 <_Z14StartMessengerPv+0x10>
		}
	}
 8000c5e:	e7cb      	b.n	8000bf8 <_Z14StartMessengerPv+0x8>
 8000c60:	080074c4 	.word	0x080074c4
 8000c64:	20000120 	.word	0x20000120
 8000c68:	200000d0 	.word	0x200000d0
 8000c6c:	200000f8 	.word	0x200000f8

08000c70 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c82:	f001 f97d 	bl	8001f80 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40001000 	.word	0x40001000

08000c94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>

08000c9e <_ZNSt5dequeI9MessengerSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f859 	bl	8000d60 <_ZNSt11_Deque_baseI9MessengerSaIS0_EEC1Ev>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	: c() { }
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	2328      	movs	r3, #40	; 0x28
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f005 ff99 	bl	8006c00 <memset>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffe4 	bl	8000c9e <_ZNSt5dequeI9MessengerSaIS0_EEC1Ev>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE4pushERKS0_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6839      	ldr	r1, [r7, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f88e 	bl	8000e10 <_ZNSt5dequeI9MessengerSaIS0_EE9push_backERKS0_>
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZNKSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f8a4 	bl	8000e54 <_ZNKSt5dequeI9MessengerSaIS0_EE5emptyEv>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return c.front();
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f8a9 	bl	8000e78 <_ZNSt5dequeI9MessengerSaIS0_EE5frontEv>
 8000d26:	4603      	mov	r3, r0
      }
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f8b0 	bl	8000ea0 <_ZNSt5dequeI9MessengerSaIS0_EE9pop_frontEv>
      }
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f8d9 	bl	8000f08 <_ZNSaI9MessengerED1Ev>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZNSt11_Deque_baseI9MessengerSaIS0_EEC1Ev>:
      _Deque_base()
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f8bc 	bl	8000ee8 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000d70:	2100      	movs	r1, #0
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f8d4 	bl	8000f20 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE17_M_initialize_mapEj>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_ZNSt11_Deque_baseI9MessengerSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d010      	beq.n	8000db4 <_ZNSt11_Deque_baseI9MessengerSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f921 	bl	8000fe6 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	461a      	mov	r2, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f934 	bl	800101c <_ZNSt11_Deque_baseI9MessengerSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffc6 	bl	8000d48 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE11_Deque_implD1Ev>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZNSt5dequeI9MessengerSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b08a      	sub	sp, #40	; 0x28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f93c 	bl	8001052 <_ZNSt5dequeI9MessengerSaIS0_EE5beginEv>
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f945 	bl	8001070 <_ZNSt5dequeI9MessengerSaIS0_EE3endEv>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f950 	bl	800108e <_ZNSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f107 0218 	add.w	r2, r7, #24
 8000df4:	f107 0108 	add.w	r1, r7, #8
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f96f 	bl	80010dc <_ZNSt5dequeI9MessengerSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffbe 	bl	8000d82 <_ZNSt11_Deque_baseI9MessengerSaIS0_EED1Ev>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_ZNSt5dequeI9MessengerSaIS0_EE9push_backERKS0_>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d00d      	beq.n	8000e44 <_ZNSt5dequeI9MessengerSaIS0_EE9push_backERKS0_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f000 f960 	bl	80010f6 <_ZNSt16allocator_traitsISaI9MessengerEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f103 0208 	add.w	r2, r3, #8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8000e42:	e003      	b.n	8000e4c <_ZNSt5dequeI9MessengerSaIS0_EE9push_backERKS0_+0x3c>
	  _M_push_back_aux(__x);
 8000e44:	6839      	ldr	r1, [r7, #0]
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f968 	bl	800111c <_ZNSt5dequeI9MessengerSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>
      }
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZNKSt5dequeI9MessengerSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f103 0218 	add.w	r2, r3, #24
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3308      	adds	r3, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f000 f99b 	bl	80011a4 <_ZSteqRKSt15_Deque_iteratorI9MessengerRS0_PS0_ES5_>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_ZNSt5dequeI9MessengerSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return *begin();
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f8e3 	bl	8001052 <_ZNSt5dequeI9MessengerSaIS0_EE5beginEv>
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f99b 	bl	80011cc <_ZNKSt15_Deque_iteratorI9MessengerRS0_PS0_EdeEv>
 8000e96:	4603      	mov	r3, r0
      }
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_ZNSt5dequeI9MessengerSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d011      	beq.n	8000eda <_ZNSt5dequeI9MessengerSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f8e8 	bl	800108e <_ZNSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	f000 f98c 	bl	80011e4 <_ZNSt16allocator_traitsISaI9MessengerEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f103 0208 	add.w	r2, r3, #8
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8000ed8:	e002      	b.n	8000ee0 <_ZNSt5dequeI9MessengerSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f98f 	bl	80011fe <_ZNSt5dequeI9MessengerSaIS0_EE16_M_pop_front_auxEv>
      }
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f9ac 	bl	800124e <_ZNSaI9MessengerEC1Ev>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9b4 	bl	8001266 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_ZNSaI9MessengerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f9c1 	bl	8001298 <_ZN9__gnu_cxx13new_allocatorI9MessengerED1Ev>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8000f2a:	2008      	movs	r0, #8
 8000f2c:	f7ff fbff 	bl	800072e <_ZSt16__deque_buf_sizej>
 8000f30:	4602      	mov	r2, r0
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f38:	3301      	adds	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3302      	adds	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000f46:	f107 0210 	add.w	r2, r7, #16
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f9ac 	bl	80012ae <_ZSt3maxIjERKT_S2_S2_>
 8000f56:	4603      	mov	r3, r0
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f9b6 	bl	80012d6 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_allocate_mapEj>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	1acb      	subs	r3, r1, r3
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000f80:	4413      	add	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	69b9      	ldr	r1, [r7, #24]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f9bc 	bl	8001310 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	69b9      	ldr	r1, [r7, #24]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f9d1 	bl	8001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f103 0218 	add.w	r2, r3, #24
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3b04      	subs	r3, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f000 f9c8 	bl	8001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000fc2:	2008      	movs	r0, #8
 8000fc4:	f7ff fbb3 	bl	800072e <_ZSt16__deque_buf_sizej>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fd0:	fb01 f202 	mul.w	r2, r1, r2
 8000fd4:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
    }
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e008      	b.n	800100a <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x24>
	_M_deallocate_node(*__n);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f9ba 	bl	8001378 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3304      	adds	r3, #4
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3f2      	bcc.n	8000ff8 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x12>
    }
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZNSt11_Deque_baseI9MessengerSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f9b5 	bl	800139e <_ZNKSt11_Deque_baseI9MessengerSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f9cb 	bl	80013d8 <_ZNSt16allocator_traitsISaIP9MessengerEE10deallocateERS2_PS1_j>
      }
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f9ba 	bl	80013c0 <_ZNSaIP9MessengerED1Ev>
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZNSt5dequeI9MessengerSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3308      	adds	r3, #8
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f81e 	bl	80010a4 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_EC1ERKS3_>
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZNSt5dequeI9MessengerSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3318      	adds	r3, #24
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f80f 	bl	80010a4 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_EC1ERKS3_>
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZNSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZNSt5dequeI9MessengerSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80010dc:	b480      	push	{r7}
 80010de:	b08d      	sub	sp, #52	; 0x34
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80010ea:	bf00      	nop
 80010ec:	3734      	adds	r7, #52	; 0x34
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_ZNSt16allocator_traitsISaI9MessengerEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f977 	bl	80013f6 <_ZSt7forwardIRK9MessengerEOT_RNSt16remove_referenceIS3_E4typeE>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f000 f97c 	bl	800140c <_ZN9__gnu_cxx13new_allocatorI9MessengerE9constructIS1_JRKS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZNSt5dequeI9MessengerSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f988 	bl	800143c <_ZNKSt5dequeI9MessengerSaIS0_EE4sizeEv>
 800112c:	4604      	mov	r4, r0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f996 	bl	8001460 <_ZNKSt5dequeI9MessengerSaIS0_EE8max_sizeEv>
 8001134:	4603      	mov	r3, r0
 8001136:	429c      	cmp	r4, r3
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <_ZNSt5dequeI9MessengerSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8001144:	4816      	ldr	r0, [pc, #88]	; (80011a0 <_ZNSt5dequeI9MessengerSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x84>)
 8001146:	f005 fc50 	bl	80069ea <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800114a:	2101      	movs	r1, #1
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f998 	bl	8001482 <_ZNSt5dequeI9MessengerSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	1d1c      	adds	r4, r3, #4
 800115a:	4610      	mov	r0, r2
 800115c:	f000 f9ac 	bl	80014b8 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_allocate_nodeEv>
 8001160:	4603      	mov	r3, r0
 8001162:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8001164:	687c      	ldr	r4, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699d      	ldr	r5, [r3, #24]
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f000 f943 	bl	80013f6 <_ZSt7forwardIRK9MessengerEOT_RNSt16remove_referenceIS3_E4typeE>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4629      	mov	r1, r5
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff ffbd 	bl	80010f6 <_ZNSt16allocator_traitsISaI9MessengerEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f103 0218 	add.w	r2, r3, #24
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	3304      	adds	r3, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4610      	mov	r0, r2
 800118c:	f000 f8db 	bl	8001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bdb0      	pop	{r4, r5, r7, pc}
 80011a0:	080074e8 	.word	0x080074e8

080011a4 <_ZSteqRKSt15_Deque_iteratorI9MessengerRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	bf0c      	ite	eq
 80011ba:	2301      	moveq	r3, #1
 80011bc:	2300      	movne	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_ZNKSt15_Deque_iteratorI9MessengerRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_ZNSt16allocator_traitsISaI9MessengerEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f973 	bl	80014dc <_ZN9__gnu_cxx13new_allocatorI9MessengerE7destroyIS1_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZNSt5dequeI9MessengerSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff40 	bl	800108e <_ZNSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>
 800120e:	4602      	mov	r2, r0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff ffe4 	bl	80011e4 <_ZNSt16allocator_traitsISaI9MessengerEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f000 f8a7 	bl	8001378 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f103 0208 	add.w	r2, r3, #8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	3304      	adds	r3, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f000 f884 	bl	8001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]
    }
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_ZNSaI9MessengerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f94b 	bl	80014f2 <_ZN9__gnu_cxx13new_allocatorI9MessengerEC1Ev>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3308      	adds	r3, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f942 	bl	8001508 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_EC1Ev>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3318      	adds	r3, #24
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f93d 	bl	8001508 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_EC1Ev>
	{ }
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN9__gnu_cxx13new_allocatorI9MessengerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d201      	bcs.n	80012c8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	e000      	b.n	80012ca <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80012c8:	687b      	ldr	r3, [r7, #4]
    }
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f859 	bl	800139e <_ZNKSt11_Deque_baseI9MessengerSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f91f 	bl	8001536 <_ZNSt16allocator_traitsISaIP9MessengerEE8allocateERS2_j>
 80012f8:	4604      	mov	r4, r0
 80012fa:	bf00      	nop
      }
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f85d 	bl	80013c0 <_ZNSaIP9MessengerED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001306:	4623      	mov	r3, r4
      }
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e008      	b.n	8001334 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_create_nodesEPPS0_S4_+0x24>
	    *__cur = this->_M_allocate_node();
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f8c8 	bl	80014b8 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_allocate_nodeEv>
 8001328:	4602      	mov	r2, r0
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3304      	adds	r3, #4
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3f2      	bcc.n	8001322 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_create_nodesEPPS0_S4_+0x12>
    }
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001346:	b590      	push	{r4, r7, lr}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685c      	ldr	r4, [r3, #4]
 8001362:	f000 f8f7 	bl	8001554 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E14_S_buffer_sizeEv>
 8001366:	4603      	mov	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	18e2      	adds	r2, r4, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
      }
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}

08001378 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001382:	687c      	ldr	r4, [r7, #4]
 8001384:	2008      	movs	r0, #8
 8001386:	f7ff f9d2 	bl	800072e <_ZSt16__deque_buf_sizej>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	4620      	mov	r0, r4
 8001392:	f000 f8e7 	bl	8001564 <_ZNSt16allocator_traitsISaI9MessengerEE10deallocateERS1_PS0_j>
      }
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}

0800139e <_ZNKSt11_Deque_baseI9MessengerSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80013a8:	6838      	ldr	r0, [r7, #0]
 80013aa:	f000 f8ea 	bl	8001582 <_ZNKSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f8f0 	bl	8001598 <_ZNSaIP9MessengerEC1IS_EERKSaIT_E>
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_ZNSaIP9MessengerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f8f2 	bl	80015b2 <_ZN9__gnu_cxx13new_allocatorIP9MessengerED1Ev>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_ZNSt16allocator_traitsISaIP9MessengerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f8ed 	bl	80015c8 <_ZN9__gnu_cxx13new_allocatorIP9MessengerE10deallocateEPS2_j>
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZSt7forwardIRK9MessengerEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_ZN9__gnu_cxx13new_allocatorI9MessengerE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ffec 	bl	80013f6 <_ZSt7forwardIRK9MessengerEOT_RNSt16remove_referenceIS3_E4typeE>
 800141e:	4604      	mov	r4, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4619      	mov	r1, r3
 8001424:	2008      	movs	r0, #8
 8001426:	f7ff f976 	bl	8000716 <_ZnwjPv>
 800142a:	4601      	mov	r1, r0
 800142c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}

0800143c <_ZNKSt5dequeI9MessengerSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f103 0218 	add.w	r2, r3, #24
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3308      	adds	r3, #8
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f000 f8c9 	bl	80015e8 <_ZStmiRKSt15_Deque_iteratorI9MessengerRS0_PS0_ES5_>
 8001456:	4603      	mov	r3, r0
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_ZNKSt5dequeI9MessengerSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f889 	bl	8001582 <_ZNKSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>
 8001470:	4603      	mov	r3, r0
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8e4 	bl	8001640 <_ZNSt5dequeI9MessengerSaIS0_EE11_S_max_sizeERKS1_>
 8001478:	4603      	mov	r3, r0
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZNSt5dequeI9MessengerSaIS0_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	6809      	ldr	r1, [r1, #0]
 800149c:	1a41      	subs	r1, r0, r1
 800149e:	1089      	asrs	r1, r1, #2
 80014a0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d904      	bls.n	80014b0 <_ZNSt5dequeI9MessengerSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80014a6:	2200      	movs	r2, #0
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8e2 	bl	8001674 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb>
      }
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80014c0:	687c      	ldr	r4, [r7, #4]
 80014c2:	2008      	movs	r0, #8
 80014c4:	f7ff f933 	bl	800072e <_ZSt16__deque_buf_sizej>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f000 f96b 	bl	80017a8 <_ZNSt16allocator_traitsISaI9MessengerEE8allocateERS1_j>
 80014d2:	4603      	mov	r3, r0
      }
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}

080014dc <_ZN9__gnu_cxx13new_allocatorI9MessengerE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_ZN9__gnu_cxx13new_allocatorI9MessengerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_ZNSt16allocator_traitsISaIP9MessengerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001540:	2200      	movs	r2, #0
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f94a 	bl	80017de <_ZN9__gnu_cxx13new_allocatorIP9MessengerE8allocateEjPKv>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001558:	2008      	movs	r0, #8
 800155a:	f7ff f8e8 	bl	800072e <_ZSt16__deque_buf_sizej>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZNSt16allocator_traitsISaI9MessengerEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f95b 	bl	8001830 <_ZN9__gnu_cxx13new_allocatorI9MessengerE10deallocateEPS1_j>
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_ZNKSt11_Deque_baseI9MessengerSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZNSaIP9MessengerEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f954 	bl	8001850 <_ZN9__gnu_cxx13new_allocatorIP9MessengerEC1Ev>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_ZN9__gnu_cxx13new_allocatorIP9MessengerED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZN9__gnu_cxx13new_allocatorIP9MessengerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4619      	mov	r1, r3
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f005 f9ec 	bl	80069b8 <_ZdlPvj>
      }
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZStmiRKSt15_Deque_iteratorI9MessengerRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80015f2:	f7ff ffaf 	bl	8001554 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E14_S_buffer_sizeEv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	109b      	asrs	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf14      	ite	ne
 8001610:	2301      	movne	r3, #1
 8001612:	2300      	moveq	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6852      	ldr	r2, [r2, #4]
 8001624:	1a8a      	subs	r2, r1, r2
 8001626:	10d2      	asrs	r2, r2, #3
 8001628:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	6891      	ldr	r1, [r2, #8]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	10d2      	asrs	r2, r2, #3
 8001636:	4413      	add	r3, r2
      }
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZNSt5dequeI9MessengerSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8001648:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800164c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f909 	bl	8001866 <_ZNSt16allocator_traitsISaI9MessengerEE8max_sizeERKS1_>
 8001654:	4603      	mov	r3, r0
 8001656:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f90b 	bl	800187e <_ZSt3minIjERKT_S2_S2_>
 8001668:	4603      	mov	r3, r0
 800166a:	681b      	ldr	r3, [r3, #0]
      }
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	4613      	mov	r3, r2
 8001680:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	109b      	asrs	r3, r3, #2
 800168e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001690:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	4413      	add	r3, r2
 8001698:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d92d      	bls.n	8001702 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	1acb      	subs	r3, r1, r3
 80016b2:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80016b4:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	e000      	b.n	80016c4 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80016c2:	2300      	movs	r3, #0
 80016c4:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80016c6:	4413      	add	r3, r2
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d209      	bcs.n	80016e8 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80016dc:	3304      	adds	r3, #4
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	f000 f8e0 	bl	80018a6 <_ZSt4copyIPP9MessengerS2_ET0_T_S4_S3_>
 80016e6:	e048      	b.n	800177a <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80016f0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	4413      	add	r3, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	f000 f8eb 	bl	80018d6 <_ZSt13copy_backwardIPP9MessengerS2_ET0_T_S4_S3_>
 8001700:	e03b      	b.n	800177a <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3304      	adds	r3, #4
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fdcc 	bl	80012ae <_ZSt3maxIjERKT_S2_S2_>
 8001716:	4603      	mov	r3, r0
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800171c:	3302      	adds	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	69b9      	ldr	r1, [r7, #24]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fdd6 	bl	80012d6 <_ZNSt11_Deque_baseI9MessengerSaIS0_EE15_M_allocate_mapEj>
 800172a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0xce>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	e000      	b.n	8001744 <_ZNSt5dequeI9MessengerSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8001742:	2300      	movs	r3, #0
 8001744:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4413      	add	r3, r2
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001754:	3304      	adds	r3, #4
 8001756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	f000 f8a4 	bl	80018a6 <_ZSt4copyIPP9MessengerS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	461a      	mov	r2, r3
 800176a:	f7ff fc57 	bl	800101c <_ZNSt11_Deque_baseI9MessengerSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3308      	adds	r3, #8
 800177e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fde0 	bl	8001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f103 0018 	add.w	r0, r3, #24
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001792:	3b01      	subs	r3, #1
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001798:	4413      	add	r3, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fdd3 	bl	8001346 <_ZNSt15_Deque_iteratorI9MessengerRS0_PS0_E11_M_set_nodeEPS2_>
    }
 80017a0:	bf00      	nop
 80017a2:	372c      	adds	r7, #44	; 0x2c
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <_ZNSt16allocator_traitsISaI9MessengerEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80017b2:	2200      	movs	r2, #0
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f8b1 	bl	800191e <_ZN9__gnu_cxx13new_allocatorI9MessengerE8allocateEjPKv>
 80017bc:	4603      	mov	r3, r0
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZNK9__gnu_cxx13new_allocatorIP9MessengerE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80017ce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_ZN9__gnu_cxx13new_allocatorIP9MessengerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f7ff ffeb 	bl	80017c6 <_ZNK9__gnu_cxx13new_allocatorIP9MessengerE11_M_max_sizeEv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf8c      	ite	hi
 80017f8:	2301      	movhi	r3, #1
 80017fa:	2300      	movls	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf14      	ite	ne
 8001802:	2301      	movne	r3, #1
 8001804:	2300      	moveq	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <_ZN9__gnu_cxx13new_allocatorIP9MessengerE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001812:	d301      	bcc.n	8001818 <_ZN9__gnu_cxx13new_allocatorIP9MessengerE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001814:	f005 f8e6 	bl	80069e4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001818:	f005 f8e1 	bl	80069de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f005 f8cb 	bl	80069bc <_Znwj>
 8001826:	4603      	mov	r3, r0
      }
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZN9__gnu_cxx13new_allocatorI9MessengerE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4619      	mov	r1, r3
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f005 f8b8 	bl	80069b8 <_ZdlPvj>
      }
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN9__gnu_cxx13new_allocatorIP9MessengerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_ZNSt16allocator_traitsISaI9MessengerEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f87e 	bl	8001970 <_ZNK9__gnu_cxx13new_allocatorI9MessengerE8max_sizeEv>
 8001874:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d201      	bcs.n	8001898 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	e000      	b.n	800189a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001898:	687b      	ldr	r3, [r7, #4]
    }
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_ZSt4copyIPP9MessengerS2_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80018a6:	b590      	push	{r4, r7, lr}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f868 	bl	8001988 <_ZSt12__miter_baseIPP9MessengerET_S3_>
 80018b8:	4604      	mov	r4, r0
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 f864 	bl	8001988 <_ZSt12__miter_baseIPP9MessengerET_S3_>
 80018c0:	4603      	mov	r3, r0
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f000 f869 	bl	800199e <_ZSt13__copy_move_aILb0EPP9MessengerS2_ET1_T0_S4_S3_>
 80018cc:	4603      	mov	r3, r0
    }
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}

080018d6 <_ZSt13copy_backwardIPP9MessengerS2_ET0_T_S4_S3_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80018d6:	b590      	push	{r4, r7, lr}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f850 	bl	8001988 <_ZSt12__miter_baseIPP9MessengerET_S3_>
 80018e8:	4604      	mov	r4, r0
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f000 f84c 	bl	8001988 <_ZSt12__miter_baseIPP9MessengerET_S3_>
 80018f0:	4603      	mov	r3, r0
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4620      	mov	r0, r4
 80018f8:	f000 f874 	bl	80019e4 <_ZSt22__copy_move_backward_aILb0EPP9MessengerS2_ET1_T0_S4_S3_>
 80018fc:	4603      	mov	r3, r0
    }
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}

08001906 <_ZNK9__gnu_cxx13new_allocatorI9MessengerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800190e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZN9__gnu_cxx13new_allocatorI9MessengerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ffeb 	bl	8001906 <_ZNK9__gnu_cxx13new_allocatorI9MessengerE11_M_max_sizeEv>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4293      	cmp	r3, r2
 8001936:	bf8c      	ite	hi
 8001938:	2301      	movhi	r3, #1
 800193a:	2300      	movls	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <_ZN9__gnu_cxx13new_allocatorI9MessengerE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001952:	d301      	bcc.n	8001958 <_ZN9__gnu_cxx13new_allocatorI9MessengerE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001954:	f005 f846 	bl	80069e4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001958:	f005 f841 	bl	80069de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4618      	mov	r0, r3
 8001962:	f005 f82b 	bl	80069bc <_Znwj>
 8001966:	4603      	mov	r3, r0
      }
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNK9__gnu_cxx13new_allocatorI9MessengerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffc4 	bl	8001906 <_ZNK9__gnu_cxx13new_allocatorI9MessengerE11_M_max_sizeEv>
 800197e:	4603      	mov	r3, r0
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZSt12__miter_baseIPP9MessengerET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_ZSt13__copy_move_aILb0EPP9MessengerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800199e:	b5b0      	push	{r4, r5, r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f83d 	bl	8001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>
 80019b0:	4604      	mov	r4, r0
 80019b2:	68b8      	ldr	r0, [r7, #8]
 80019b4:	f000 f839 	bl	8001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>
 80019b8:	4605      	mov	r5, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f834 	bl	8001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4629      	mov	r1, r5
 80019c8:	4620      	mov	r0, r4
 80019ca:	f000 f839 	bl	8001a40 <_ZSt14__copy_move_a1ILb0EPP9MessengerS2_ET1_T0_S4_S3_>
 80019ce:	4602      	mov	r2, r0
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f843 	bl	8001a60 <_ZSt12__niter_wrapIPP9MessengerET_RKS3_S3_>
 80019da:	4603      	mov	r3, r0
    }
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}

080019e4 <_ZSt22__copy_move_backward_aILb0EPP9MessengerS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f81a 	bl	8001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>
 80019f6:	4604      	mov	r4, r0
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f000 f816 	bl	8001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>
 80019fe:	4605      	mov	r5, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f811 	bl	8001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f000 f832 	bl	8001a78 <_ZSt23__copy_move_backward_a1ILb0EPP9MessengerS2_ET1_T0_S4_S3_>
 8001a14:	4602      	mov	r2, r0
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f820 	bl	8001a60 <_ZSt12__niter_wrapIPP9MessengerET_RKS3_S3_>
 8001a20:	4603      	mov	r3, r0
    }
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdb0      	pop	{r4, r5, r7, pc}

08001a2a <_ZSt12__niter_baseIPP9MessengerET_S3_>:
    __niter_base(_Iterator __it)
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_ZSt14__copy_move_a1ILb0EPP9MessengerS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f821 	bl	8001a98 <_ZSt14__copy_move_a2ILb0EPP9MessengerS2_ET1_T0_S4_S3_>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZSt12__niter_wrapIPP9MessengerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_ZSt23__copy_move_backward_a1ILb0EPP9MessengerS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f815 	bl	8001ab8 <_ZSt23__copy_move_backward_a2ILb0EPP9MessengerS2_ET1_T0_S4_S3_>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZSt14__copy_move_a2ILb0EPP9MessengerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f815 	bl	8001ad8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9MessengerEEPT_PKS5_S8_S6_>
 8001aae:	4603      	mov	r3, r0
    }
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZSt23__copy_move_backward_a2ILb0EPP9MessengerS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f822 	bl	8001b12 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP9MessengerEEPT_PKS5_S8_S6_>
 8001ace:	4603      	mov	r3, r0
    }
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9MessengerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	109b      	asrs	r3, r3, #2
 8001aec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP9MessengerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f005 f865 	bl	8006bcc <memmove>
	  return __result + _Num;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
	}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP9MessengerEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	109b      	asrs	r3, r3, #2
 8001b26:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP9MessengerEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	425b      	negs	r3, r3
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	18d0      	adds	r0, r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	f005 f844 	bl	8006bcc <memmove>
	  return __result - _Num;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	425b      	negs	r3, r3
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
	}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEED1Ev>:
    class queue
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f930 	bl	8000dc6 <_ZNSt5dequeI9MessengerSaIS0_EED1Ev>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10d      	bne.n	8001b9c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d108      	bne.n	8001b9c <_Z41__static_initialization_and_destruction_0ii+0x2c>
std::queue<Messenger> task_1_queue;
 8001b8a:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001b8c:	f7ff f894 	bl	8000cb8 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
std::queue<Messenger> task_2_queue;
 8001b90:	480e      	ldr	r0, [pc, #56]	; (8001bcc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001b92:	f7ff f891 	bl	8000cb8 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
std::queue<Messenger> messenger_queue;
 8001b96:	480e      	ldr	r0, [pc, #56]	; (8001bd0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001b98:	f7ff f88e 	bl	8000cb8 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d108      	bne.n	8001bbe <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001bae:	f7ff ffd2 	bl	8001b56 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEED1Ev>
std::queue<Messenger> task_2_queue;
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001bb4:	f7ff ffcf 	bl	8001b56 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEED1Ev>
std::queue<Messenger> task_1_queue;
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001bba:	f7ff ffcc 	bl	8001b56 <_ZNSt5queueI9MessengerSt5dequeIS0_SaIS0_EEED1Ev>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000d0 	.word	0x200000d0
 8001bcc:	200000f8 	.word	0x200000f8
 8001bd0:	20000120 	.word	0x20000120

08001bd4 <_GLOBAL__sub_I_huart2>:
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ffc7 	bl	8001b70 <_Z41__static_initialization_and_destruction_0ii>
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_GLOBAL__sub_D_huart2>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ffbf 	bl	8001b70 <_Z41__static_initialization_and_destruction_0ii>
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_MspInit>:
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_MspInit+0x54>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_MspInit+0x54>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_MspInit+0x54>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_MspInit+0x54>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_MspInit+0x54>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_MspInit+0x54>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	210f      	movs	r1, #15
 8001c36:	f06f 0001 	mvn.w	r0, #1
 8001c3a:	f000 fa79 	bl	8002130 <HAL_NVIC_SetPriority>
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_UART_MspInit>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_UART_MspInit+0x84>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12b      	bne.n	8001cc6 <HAL_UART_MspInit+0x7a>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_UART_MspInit+0x8c>)
 8001cc2:	f000 fa5f 	bl	8002184 <HAL_GPIO_Init>
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40004400 	.word	0x40004400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000

08001cdc <HAL_InitTick>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_InitTick+0xe4>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a32      	ldr	r2, [pc, #200]	; (8001dc0 <HAL_InitTick+0xe4>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_InitTick+0xe4>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fd4e 	bl	80027b4 <HAL_RCC_GetClockConfig>
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_InitTick+0x4e>
 8001d22:	f000 fd1f 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8001d26:	6378      	str	r0, [r7, #52]	; 0x34
 8001d28:	e004      	b.n	8001d34 <HAL_InitTick+0x58>
 8001d2a:	f000 fd1b 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_InitTick+0xe8>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d44:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d54:	6053      	str	r3, [r2, #4]
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
 8001d68:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d6a:	f001 fa23 	bl	80031b4 <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11b      	bne.n	8001db4 <HAL_InitTick+0xd8>
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d7e:	f001 fa73 	bl	8003268 <HAL_TIM_Base_Start_IT>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d111      	bne.n	8001db4 <HAL_InitTick+0xd8>
 8001d90:	2036      	movs	r0, #54	; 0x36
 8001d92:	f000 f9e9 	bl	8002168 <HAL_NVIC_EnableIRQ>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d808      	bhi.n	8001dae <HAL_InitTick+0xd2>
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	2036      	movs	r0, #54	; 0x36
 8001da2:	f000 f9c5 	bl	8002130 <HAL_NVIC_SetPriority>
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_InitTick+0xf4>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e002      	b.n	8001db4 <HAL_InitTick+0xd8>
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001db4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001db8:	4618      	mov	r0, r3
 8001dba:	3738      	adds	r7, #56	; 0x38
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	431bde83 	.word	0x431bde83
 8001dc8:	20000148 	.word	0x20000148
 8001dcc:	40001000 	.word	0x40001000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <NMI_Handler>:
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <DebugMon_Handler>:
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <TIM6_DAC_IRQHandler>:
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM6_DAC_IRQHandler+0x10>)
 8001e06:	f001 fa9f 	bl	8003348 <HAL_TIM_IRQHandler>
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000148 	.word	0x20000148

08001e14 <_getpid>:
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_kill>:
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	f004 ff43 	bl	8006cb8 <__errno>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2216      	movs	r2, #22
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_exit>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ffe7 	bl	8001e24 <_kill>
 8001e56:	e7fe      	b.n	8001e56 <_exit+0x12>

08001e58 <_sbrk>:
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
 8001e88:	f004 ff16 	bl	8006cb8 <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20020000 	.word	0x20020000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	20000190 	.word	0x20000190
 8001ec0:	20004c38 	.word	0x20004c38

08001ec4 <SystemInit>:
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f20 <LoopFillZerobss+0x12>
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1a>)
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <LoopFillZerobss+0x1e>)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:
 8001ef6:	58d4      	ldr	r4, [r2, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:
 8001efc:	18c4      	adds	r4, r0, r3
 8001efe:	428c      	cmp	r4, r1
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopFillZerobss+0x22>)
 8001f04:	4c0b      	ldr	r4, [pc, #44]	; (8001f34 <LoopFillZerobss+0x26>)
 8001f06:	2300      	movs	r3, #0
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:
 8001f0e:	42a2      	cmp	r2, r4
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>
 8001f12:	f7ff ffd7 	bl	8001ec4 <SystemInit>
 8001f16:	f004 fed5 	bl	8006cc4 <__libc_init_array>
 8001f1a:	f7fe fc77 	bl	800080c <main>
 8001f1e:	4770      	bx	lr
 8001f20:	20020000 	.word	0x20020000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000060 	.word	0x20000060
 8001f2c:	08007624 	.word	0x08007624
 8001f30:	20000060 	.word	0x20000060
 8001f34:	20004c34 	.word	0x20004c34

08001f38 <ADC_IRQHandler>:
 8001f38:	e7fe      	b.n	8001f38 <ADC_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f8d8 	bl	800211a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f7ff feb6 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fe40 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000194 	.word	0x20000194

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000194 	.word	0x20000194

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff4c 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff61 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ffb1 	bl	80020b4 <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff80 	bl	8002060 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff54 	bl	8002024 <__NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e165      	b.n	800246c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	f040 8154 	bne.w	8002466 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d005      	beq.n	80021d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d130      	bne.n	8002238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 0201 	and.w	r2, r3, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b03      	cmp	r3, #3
 8002242:	d017      	beq.n	8002274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d123      	bne.n	80022c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0203 	and.w	r2, r3, #3
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80ae 	beq.w	8002466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <HAL_GPIO_Init+0x300>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a5c      	ldr	r2, [pc, #368]	; (8002484 <HAL_GPIO_Init+0x300>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_GPIO_Init+0x300>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002326:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	220f      	movs	r2, #15
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4f      	ldr	r2, [pc, #316]	; (800248c <HAL_GPIO_Init+0x308>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d025      	beq.n	800239e <HAL_GPIO_Init+0x21a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_GPIO_Init+0x30c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <HAL_GPIO_Init+0x216>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x310>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x212>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x314>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_GPIO_Init+0x318>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x20a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_GPIO_Init+0x31c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x206>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x320>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x202>
 8002382:	2306      	movs	r3, #6
 8002384:	e00c      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 8002386:	2307      	movs	r3, #7
 8002388:	e00a      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800238a:	2305      	movs	r3, #5
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800238e:	2304      	movs	r3, #4
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_GPIO_Init+0x324>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_GPIO_Init+0x324>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_GPIO_Init+0x324>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x324>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_GPIO_Init+0x324>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f ae96 	bls.w	80021a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40021400 	.word	0x40021400
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_PWREx_EnableOverDrive+0x90>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_PWREx_EnableOverDrive+0x90>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_PWREx_EnableOverDrive+0x90>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_PWREx_EnableOverDrive+0x94>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800250c:	f7ff fd4c 	bl	8001fa8 <HAL_GetTick>
 8002510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002512:	e009      	b.n	8002528 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002514:	f7ff fd48 	bl	8001fa8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002522:	d901      	bls.n	8002528 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e01f      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d1ee      	bne.n	8002514 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7ff fd34 	bl	8001fa8 <HAL_GetTick>
 8002540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002542:	e009      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002544:	f7ff fd30 	bl	8001fa8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002552:	d901      	bls.n	8002558 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e007      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_PWREx_EnableOverDrive+0x98>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002564:	d1ee      	bne.n	8002544 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	420e0040 	.word	0x420e0040
 8002578:	40007000 	.word	0x40007000
 800257c:	420e0044 	.word	0x420e0044

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0cc      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d90c      	bls.n	80025bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b8      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d044      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d119      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	2b03      	cmp	r3, #3
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e067      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7ff fc9a 	bl	8001fa8 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff fc96 	bl	8001fa8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e04f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d20c      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e032      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002706:	f000 f887 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490a      	ldr	r1, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fad8 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00
 800273c:	40023800 	.word	0x40023800
 8002740:	080075c0 	.word	0x080075c0
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002768:	f7ff fff0 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0a9b      	lsrs	r3, r3, #10
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	080075d0 	.word	0x080075d0

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002790:	f7ff ffdc 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0b5b      	lsrs	r3, r3, #13
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080075d0 	.word	0x080075d0

080027b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	220f      	movs	r2, #15
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_RCC_GetClockConfig+0x60>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0ae      	sub	sp, #184	; 0xb8
 800281e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800283e:	4bcb      	ldr	r3, [pc, #812]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b0c      	cmp	r3, #12
 8002848:	f200 8206 	bhi.w	8002c58 <HAL_RCC_GetSysClockFreq+0x440>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_RCC_GetSysClockFreq+0x3c>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002889 	.word	0x08002889
 8002858:	08002c59 	.word	0x08002c59
 800285c:	08002c59 	.word	0x08002c59
 8002860:	08002c59 	.word	0x08002c59
 8002864:	08002891 	.word	0x08002891
 8002868:	08002c59 	.word	0x08002c59
 800286c:	08002c59 	.word	0x08002c59
 8002870:	08002c59 	.word	0x08002c59
 8002874:	08002899 	.word	0x08002899
 8002878:	08002c59 	.word	0x08002c59
 800287c:	08002c59 	.word	0x08002c59
 8002880:	08002c59 	.word	0x08002c59
 8002884:	08002a89 	.word	0x08002a89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4bb9      	ldr	r3, [pc, #740]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x358>)
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800288e:	e1e7      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002890:	4bb8      	ldr	r3, [pc, #736]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002892:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002896:	e1e3      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002898:	4bb4      	ldr	r3, [pc, #720]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a4:	4bb1      	ldr	r3, [pc, #708]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d071      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b0:	4bae      	ldr	r3, [pc, #696]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80028c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028d6:	4622      	mov	r2, r4
 80028d8:	462b      	mov	r3, r5
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	0159      	lsls	r1, r3, #5
 80028e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e8:	0150      	lsls	r0, r2, #5
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4621      	mov	r1, r4
 80028f0:	1a51      	subs	r1, r2, r1
 80028f2:	6439      	str	r1, [r7, #64]	; 0x40
 80028f4:	4629      	mov	r1, r5
 80028f6:	eb63 0301 	sbc.w	r3, r3, r1
 80028fa:	647b      	str	r3, [r7, #68]	; 0x44
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002908:	4649      	mov	r1, r9
 800290a:	018b      	lsls	r3, r1, #6
 800290c:	4641      	mov	r1, r8
 800290e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002912:	4641      	mov	r1, r8
 8002914:	018a      	lsls	r2, r1, #6
 8002916:	4641      	mov	r1, r8
 8002918:	1a51      	subs	r1, r2, r1
 800291a:	63b9      	str	r1, [r7, #56]	; 0x38
 800291c:	4649      	mov	r1, r9
 800291e:	eb63 0301 	sbc.w	r3, r3, r1
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002930:	4649      	mov	r1, r9
 8002932:	00cb      	lsls	r3, r1, #3
 8002934:	4641      	mov	r1, r8
 8002936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293a:	4641      	mov	r1, r8
 800293c:	00ca      	lsls	r2, r1, #3
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	4603      	mov	r3, r0
 8002944:	4622      	mov	r2, r4
 8002946:	189b      	adds	r3, r3, r2
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
 800294a:	462b      	mov	r3, r5
 800294c:	460a      	mov	r2, r1
 800294e:	eb42 0303 	adc.w	r3, r2, r3
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002960:	4629      	mov	r1, r5
 8002962:	024b      	lsls	r3, r1, #9
 8002964:	4621      	mov	r1, r4
 8002966:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800296a:	4621      	mov	r1, r4
 800296c:	024a      	lsls	r2, r1, #9
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002976:	2200      	movs	r2, #0
 8002978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800297c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002980:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002984:	f7fd fc94 	bl	80002b0 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002992:	e067      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	2200      	movs	r2, #0
 800299c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ae:	2300      	movs	r3, #0
 80029b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80029b6:	4622      	mov	r2, r4
 80029b8:	462b      	mov	r3, r5
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4621      	mov	r1, r4
 80029d0:	1a51      	subs	r1, r2, r1
 80029d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80029d4:	4629      	mov	r1, r5
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80029e8:	4649      	mov	r1, r9
 80029ea:	018b      	lsls	r3, r1, #6
 80029ec:	4641      	mov	r1, r8
 80029ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f2:	4641      	mov	r1, r8
 80029f4:	018a      	lsls	r2, r1, #6
 80029f6:	4641      	mov	r1, r8
 80029f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fc:	4649      	mov	r1, r9
 80029fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a16:	4692      	mov	sl, r2
 8002a18:	469b      	mov	fp, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	462b      	mov	r3, r5
 8002a24:	eb4b 0303 	adc.w	r3, fp, r3
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a50:	677a      	str	r2, [r7, #116]	; 0x74
 8002a52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a56:	f7fd fc2b 	bl	80002b0 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a86:	e0eb      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d06b      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002abc:	4622      	mov	r2, r4
 8002abe:	462b      	mov	r3, r5
 8002ac0:	f04f 0000 	mov.w	r0, #0
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	0159      	lsls	r1, r3, #5
 8002aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ace:	0150      	lsls	r0, r2, #5
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	1a51      	subs	r1, r2, r1
 8002ad8:	61b9      	str	r1, [r7, #24]
 8002ada:	4629      	mov	r1, r5
 8002adc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002aee:	4659      	mov	r1, fp
 8002af0:	018b      	lsls	r3, r1, #6
 8002af2:	4651      	mov	r1, sl
 8002af4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af8:	4651      	mov	r1, sl
 8002afa:	018a      	lsls	r2, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ebb2 0801 	subs.w	r8, r2, r1
 8002b02:	4659      	mov	r1, fp
 8002b04:	eb63 0901 	sbc.w	r9, r3, r1
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1c:	4690      	mov	r8, r2
 8002b1e:	4699      	mov	r9, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	eb18 0303 	adds.w	r3, r8, r3
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	462b      	mov	r3, r5
 8002b2a:	eb49 0303 	adc.w	r3, r9, r3
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	024b      	lsls	r3, r1, #9
 8002b40:	4621      	mov	r1, r4
 8002b42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b46:	4621      	mov	r1, r4
 8002b48:	024a      	lsls	r2, r1, #9
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b52:	2200      	movs	r2, #0
 8002b54:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b56:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b5c:	f7fd fba8 	bl	80002b0 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b6a:	e065      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x420>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b78:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	4611      	mov	r1, r2
 8002b84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b88:	653b      	str	r3, [r7, #80]	; 0x50
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b92:	4642      	mov	r2, r8
 8002b94:	464b      	mov	r3, r9
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	0159      	lsls	r1, r3, #5
 8002ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba4:	0150      	lsls	r0, r2, #5
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4641      	mov	r1, r8
 8002bac:	1a51      	subs	r1, r2, r1
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bce:	4651      	mov	r1, sl
 8002bd0:	018a      	lsls	r2, r1, #6
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	1a54      	subs	r4, r2, r1
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	eb63 0501 	sbc.w	r5, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	00eb      	lsls	r3, r5, #3
 8002be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bea:	00e2      	lsls	r2, r4, #3
 8002bec:	4614      	mov	r4, r2
 8002bee:	461d      	mov	r5, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	18e3      	adds	r3, r4, r3
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	eb45 0303 	adc.w	r3, r5, r3
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	028b      	lsls	r3, r1, #10
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c14:	4621      	mov	r1, r4
 8002c16:	028a      	lsls	r2, r1, #10
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c20:	2200      	movs	r2, #0
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c2a:	f7fd fb41 	bl	80002b0 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0f1b      	lsrs	r3, r3, #28
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c56:	e003      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	37b8      	adds	r7, #184	; 0xb8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400

08002c78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e28d      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8083 	beq.w	8002d9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c98:	4b94      	ldr	r3, [pc, #592]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d019      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca4:	4b91      	ldr	r3, [pc, #580]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cb0:	4b8e      	ldr	r3, [pc, #568]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d112      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4b84      	ldr	r3, [pc, #528]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05b      	beq.n	8002d9c <HAL_RCC_OscConfig+0x124>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d157      	bne.n	8002d9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e25a      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCC_OscConfig+0x90>
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xcc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0xb4>
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a72      	ldr	r2, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xcc>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6b      	ldr	r2, [pc, #428]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f92c 	bl	8001fa8 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d54:	f7ff f928 	bl	8001fa8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e21f      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b61      	ldr	r3, [pc, #388]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xdc>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7ff f918 	bl	8001fa8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff f914 	bl	8001fa8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e20b      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x104>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06f      	beq.n	8002e8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002daa:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db6:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x186>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1d3      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7ff f8c1 	bl	8001fa8 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f8bd 	bl	8001fa8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1b4      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4925      	ldr	r1, [pc, #148]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff f8a0 	bl	8001fa8 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff f89c 	bl	8001fa8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e193      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d036      	beq.n	8002f04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7ff f880 	bl	8001fa8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff f87c 	bl	8001fa8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e173      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x234>
 8002eca:	e01b      	b.n	8002f04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7ff f869 	bl	8001fa8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eda:	f7ff f865 	bl	8001fa8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e15c      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470000 	.word	0x42470000
 8002ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b8a      	ldr	r3, [pc, #552]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ea      	bne.n	8002eda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8097 	beq.w	8003040 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b83      	ldr	r3, [pc, #524]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b7f      	ldr	r3, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b7c      	ldr	r3, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b79      	ldr	r3, [pc, #484]	; (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff f825 	bl	8001fa8 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7ff f821 	bl	8001fa8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e118      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x31e>
 8002f88:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x358>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x340>
 8002f9e:	4b61      	ldr	r3, [pc, #388]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a60      	ldr	r2, [pc, #384]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b5e      	ldr	r3, [pc, #376]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a5d      	ldr	r2, [pc, #372]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x358>
 8002fb8:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a59      	ldr	r2, [pc, #356]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fca:	f023 0304 	bic.w	r3, r3, #4
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe ffe6 	bl	8001fa8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe ffe2 	bl	8001fa8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0d7      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ee      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x368>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe ffd0 	bl	8001fa8 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe ffcc 	bl	8001fa8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0c1      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80ad 	beq.w	80031a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d060      	beq.n	8003118 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d145      	bne.n	80030ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b33      	ldr	r3, [pc, #204]	; (800312c <HAL_RCC_OscConfig+0x4b4>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe ffa0 	bl	8001fa8 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe ff9c 	bl	8001fa8 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e093      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	491b      	ldr	r1, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_RCC_OscConfig+0x4b4>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe ff71 	bl	8001fa8 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe ff6d 	bl	8001fa8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e064      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x452>
 80030e8:	e05c      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_RCC_OscConfig+0x4b4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe ff5a 	bl	8001fa8 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe ff56 	bl	8001fa8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e04d      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_OscConfig+0x4ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x480>
 8003116:	e045      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e040      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
 8003124:	40023800 	.word	0x40023800
 8003128:	40007000 	.word	0x40007000
 800312c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_RCC_OscConfig+0x538>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d030      	beq.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d129      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d122      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	4293      	cmp	r3, r2
 800316a:	d119      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d10f      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e041      	b.n	800324a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f839 	bl	8003252 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 f9d8 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e04e      	b.n	800331e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_TIM_Base_Start_IT+0xc4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d01d      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_TIM_Base_Start_IT+0xc8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_TIM_Base_Start_IT+0xcc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_TIM_Base_Start_IT+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1b      	ldr	r2, [pc, #108]	; (800333c <HAL_TIM_Base_Start_IT+0xd4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_TIM_Base_Start_IT+0xd8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_TIM_Base_Start_IT+0xdc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d111      	bne.n	800330c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d010      	beq.n	800331c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	e007      	b.n	800331c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40010400 	.word	0x40010400
 8003340:	40014000 	.word	0x40014000
 8003344:	40001800 	.word	0x40001800

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8ee 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8e0 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8f1 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8c4 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8b6 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8c7 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0208 	mvn.w	r2, #8
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f89a 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f88c 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f89d 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f870 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f862 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f873 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fbd2 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f902 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f838 	bl	8003594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b20      	cmp	r3, #32
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0220 	mvn.w	r2, #32
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8cc 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a40      	ldr	r2, [pc, #256]	; (80036bc <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d00f      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <TIM_Base_SetConfig+0x118>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <TIM_Base_SetConfig+0x11c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <TIM_Base_SetConfig+0x120>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <TIM_Base_SetConfig+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <TIM_Base_SetConfig+0x114>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02b      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d027      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <TIM_Base_SetConfig+0x118>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d023      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <TIM_Base_SetConfig+0x11c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <TIM_Base_SetConfig+0x120>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01b      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <TIM_Base_SetConfig+0x124>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d017      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <TIM_Base_SetConfig+0x128>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <TIM_Base_SetConfig+0x12c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <TIM_Base_SetConfig+0x130>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a25      	ldr	r2, [pc, #148]	; (80036dc <TIM_Base_SetConfig+0x134>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a24      	ldr	r2, [pc, #144]	; (80036e0 <TIM_Base_SetConfig+0x138>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <TIM_Base_SetConfig+0x13c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <TIM_Base_SetConfig+0x114>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <TIM_Base_SetConfig+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	615a      	str	r2, [r3, #20]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40010400 	.word	0x40010400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800
 80036dc:	40001800 	.word	0x40001800
 80036e0:	40001c00 	.word	0x40001c00
 80036e4:	40002000 	.word	0x40002000

080036e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e03f      	b.n	80037a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe fa88 	bl	8001c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f929 	bl	80039ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af02      	add	r7, sp, #8
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d17c      	bne.n	80038c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_UART_Transmit+0x2c>
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e075      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Transmit+0x3e>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e06e      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fe:	f7fe fbd3 	bl	8001fa8 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d108      	bne.n	800382c <HAL_UART_Transmit+0x82>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e003      	b.n	8003834 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800383c:	e02a      	b.n	8003894 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2180      	movs	r1, #128	; 0x80
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f840 	bl	80038ce <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e036      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	3302      	adds	r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	e007      	b.n	8003886 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1cf      	bne.n	800383e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2140      	movs	r1, #64	; 0x40
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f810 	bl	80038ce <UART_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e006      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b090      	sub	sp, #64	; 0x40
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038de:	e050      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e6:	d04c      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <UART_WaitOnFlagUntilTimeout+0x30>
 80038ee:	f7fe fb5b 	bl	8001fa8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d241      	bcs.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800391e:	637a      	str	r2, [r7, #52]	; 0x34
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	613b      	str	r3, [r7, #16]
   return(result);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003952:	623a      	str	r2, [r7, #32]
 8003954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e00f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	429a      	cmp	r2, r3
 800399e:	d09f      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3740      	adds	r7, #64	; 0x40
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b0:	b0c0      	sub	sp, #256	; 0x100
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	68d9      	ldr	r1, [r3, #12]
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	ea40 0301 	orr.w	r3, r0, r1
 80039d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a04:	f021 010c 	bic.w	r1, r1, #12
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a12:	430b      	orrs	r3, r1
 8003a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	6999      	ldr	r1, [r3, #24]
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	ea40 0301 	orr.w	r3, r0, r1
 8003a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b8f      	ldr	r3, [pc, #572]	; (8003c78 <UART_SetConfig+0x2cc>)
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d005      	beq.n	8003a4c <UART_SetConfig+0xa0>
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <UART_SetConfig+0x2d0>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d104      	bne.n	8003a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7fe fe9e 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8003a50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a54:	e003      	b.n	8003a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a56:	f7fe fe85 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8003a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a68:	f040 810c 	bne.w	8003c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	1891      	adds	r1, r2, r2
 8003a84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a86:	415b      	adcs	r3, r3
 8003a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a8e:	4621      	mov	r1, r4
 8003a90:	eb12 0801 	adds.w	r8, r2, r1
 8003a94:	4629      	mov	r1, r5
 8003a96:	eb43 0901 	adc.w	r9, r3, r1
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aae:	4690      	mov	r8, r2
 8003ab0:	4699      	mov	r9, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	eb18 0303 	adds.w	r3, r8, r3
 8003ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003abc:	462b      	mov	r3, r5
 8003abe:	eb49 0303 	adc.w	r3, r9, r3
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ada:	460b      	mov	r3, r1
 8003adc:	18db      	adds	r3, r3, r3
 8003ade:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	eb42 0303 	adc.w	r3, r2, r3
 8003ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003af0:	f7fc fbde 	bl	80002b0 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4b61      	ldr	r3, [pc, #388]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003afa:	fba3 2302 	umull	r2, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	011c      	lsls	r4, r3, #4
 8003b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b14:	4642      	mov	r2, r8
 8003b16:	464b      	mov	r3, r9
 8003b18:	1891      	adds	r1, r2, r2
 8003b1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b1c:	415b      	adcs	r3, r3
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b24:	4641      	mov	r1, r8
 8003b26:	eb12 0a01 	adds.w	sl, r2, r1
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b44:	4692      	mov	sl, r2
 8003b46:	469b      	mov	fp, r3
 8003b48:	4643      	mov	r3, r8
 8003b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b52:	464b      	mov	r3, r9
 8003b54:	eb4b 0303 	adc.w	r3, fp, r3
 8003b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b70:	460b      	mov	r3, r1
 8003b72:	18db      	adds	r3, r3, r3
 8003b74:	643b      	str	r3, [r7, #64]	; 0x40
 8003b76:	4613      	mov	r3, r2
 8003b78:	eb42 0303 	adc.w	r3, r2, r3
 8003b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b86:	f7fc fb93 	bl	80002b0 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003b92:	fba3 2301 	umull	r2, r3, r3, r1
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	; 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1acb      	subs	r3, r1, r3
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb4:	441c      	add	r4, r3
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	1891      	adds	r1, r2, r2
 8003bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bd0:	415b      	adcs	r3, r3
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bd8:	4641      	mov	r1, r8
 8003bda:	1851      	adds	r1, r2, r1
 8003bdc:	6339      	str	r1, [r7, #48]	; 0x30
 8003bde:	4649      	mov	r1, r9
 8003be0:	414b      	adcs	r3, r1
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	00cb      	lsls	r3, r1, #3
 8003bf4:	4651      	mov	r1, sl
 8003bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	00ca      	lsls	r2, r1, #3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	4642      	mov	r2, r8
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	460a      	mov	r2, r1
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	18db      	adds	r3, r3, r3
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	4613      	mov	r3, r2
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c42:	f7fc fb35 	bl	80002b0 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	2164      	movs	r1, #100	; 0x64
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	3332      	adds	r3, #50	; 0x32
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	f003 0207 	and.w	r2, r3, #7
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4422      	add	r2, r4
 8003c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c74:	e106      	b.n	8003e84 <UART_SetConfig+0x4d8>
 8003c76:	bf00      	nop
 8003c78:	40011000 	.word	0x40011000
 8003c7c:	40011400 	.word	0x40011400
 8003c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c96:	4642      	mov	r2, r8
 8003c98:	464b      	mov	r3, r9
 8003c9a:	1891      	adds	r1, r2, r2
 8003c9c:	6239      	str	r1, [r7, #32]
 8003c9e:	415b      	adcs	r3, r3
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	1854      	adds	r4, r2, r1
 8003caa:	4649      	mov	r1, r9
 8003cac:	eb43 0501 	adc.w	r5, r3, r1
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	00eb      	lsls	r3, r5, #3
 8003cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cbe:	00e2      	lsls	r2, r4, #3
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	18e3      	adds	r3, r4, r3
 8003cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ccc:	464b      	mov	r3, r9
 8003cce:	eb45 0303 	adc.w	r3, r5, r3
 8003cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	008b      	lsls	r3, r1, #2
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	008a      	lsls	r2, r1, #2
 8003d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d04:	f7fc fad4 	bl	80002b0 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	011c      	lsls	r4, r3, #4
 8003d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	61b9      	str	r1, [r7, #24]
 8003d30:	415b      	adcs	r3, r3
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d38:	4641      	mov	r1, r8
 8003d3a:	1851      	adds	r1, r2, r1
 8003d3c:	6139      	str	r1, [r7, #16]
 8003d3e:	4649      	mov	r1, r9
 8003d40:	414b      	adcs	r3, r1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d50:	4659      	mov	r1, fp
 8003d52:	00cb      	lsls	r3, r1, #3
 8003d54:	4651      	mov	r1, sl
 8003d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	00ca      	lsls	r2, r1, #3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	4642      	mov	r2, r8
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	460a      	mov	r2, r1
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d90:	4649      	mov	r1, r9
 8003d92:	008b      	lsls	r3, r1, #2
 8003d94:	4641      	mov	r1, r8
 8003d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	008a      	lsls	r2, r1, #2
 8003d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003da2:	f7fc fa85 	bl	80002b0 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003dae:	fba3 2301 	umull	r2, r3, r3, r1
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	2264      	movs	r2, #100	; 0x64
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	1acb      	subs	r3, r1, r3
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	3332      	adds	r3, #50	; 0x32
 8003dc0:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dcc:	441c      	add	r4, r3
 8003dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003dd6:	677a      	str	r2, [r7, #116]	; 0x74
 8003dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ddc:	4642      	mov	r2, r8
 8003dde:	464b      	mov	r3, r9
 8003de0:	1891      	adds	r1, r2, r2
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	415b      	adcs	r3, r3
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dec:	4641      	mov	r1, r8
 8003dee:	1851      	adds	r1, r2, r1
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	4649      	mov	r1, r9
 8003df4:	414b      	adcs	r3, r1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e04:	4659      	mov	r1, fp
 8003e06:	00cb      	lsls	r3, r1, #3
 8003e08:	4651      	mov	r1, sl
 8003e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0e:	4651      	mov	r1, sl
 8003e10:	00ca      	lsls	r2, r1, #3
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	4642      	mov	r2, r8
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e1e:	464b      	mov	r3, r9
 8003e20:	460a      	mov	r2, r1
 8003e22:	eb42 0303 	adc.w	r3, r2, r3
 8003e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	663b      	str	r3, [r7, #96]	; 0x60
 8003e32:	667a      	str	r2, [r7, #100]	; 0x64
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e40:	4649      	mov	r1, r9
 8003e42:	008b      	lsls	r3, r1, #2
 8003e44:	4641      	mov	r1, r8
 8003e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	008a      	lsls	r2, r1, #2
 8003e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e52:	f7fc fa2d 	bl	80002b0 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4422      	add	r2, r4
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e90:	51eb851f 	.word	0x51eb851f

08003e94 <__NVIC_SetPriority>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	db0a      	blt.n	8003ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <__NVIC_SetPriority+0x4c>)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	0112      	lsls	r2, r2, #4
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ebc:	e00a      	b.n	8003ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4908      	ldr	r1, [pc, #32]	; (8003ee4 <__NVIC_SetPriority+0x50>)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	3b04      	subs	r3, #4
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	761a      	strb	r2, [r3, #24]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000e100 	.word	0xe000e100
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <SysTick_Handler+0x1c>)
 8003eee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ef0:	f002 f934 	bl	800615c <xTaskGetSchedulerState>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003efa:	f000 fd95 	bl	8004a28 <xPortSysTickHandler>
  }
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f06f 0004 	mvn.w	r0, #4
 8003f12:	f7ff ffbf 	bl	8003e94 <__NVIC_SetPriority>
#endif
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f22:	f3ef 8305 	mrs	r3, IPSR
 8003f26:	603b      	str	r3, [r7, #0]
  return(result);
 8003f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f2e:	f06f 0305 	mvn.w	r3, #5
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e00c      	b.n	8003f50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f36:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <osKernelInitialize+0x44>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <osKernelInitialize+0x44>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e002      	b.n	8003f50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f50:	687b      	ldr	r3, [r7, #4]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000198 	.word	0x20000198

08003f64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6a:	f3ef 8305 	mrs	r3, IPSR
 8003f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f76:	f06f 0305 	mvn.w	r3, #5
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	e010      	b.n	8003fa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <osKernelStart+0x48>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d109      	bne.n	8003f9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f86:	f7ff ffbf 	bl	8003f08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <osKernelStart+0x48>)
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f90:	f001 fc9c 	bl	80058cc <vTaskStartScheduler>
      stat = osOK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	e002      	b.n	8003fa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fa0:	687b      	ldr	r3, [r7, #4]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000198 	.word	0x20000198

08003fb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	; 0x38
 8003fb4:	af04      	add	r7, sp, #16
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc0:	f3ef 8305 	mrs	r3, IPSR
 8003fc4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d17e      	bne.n	80040ca <osThreadNew+0x11a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d07b      	beq.n	80040ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fd6:	2318      	movs	r3, #24
 8003fd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d045      	beq.n	8004076 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <osThreadNew+0x48>
        name = attr->name;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <osThreadNew+0x6e>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b38      	cmp	r3, #56	; 0x38
 8004010:	d805      	bhi.n	800401e <osThreadNew+0x6e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <osThreadNew+0x72>
        return (NULL);
 800401e:	2300      	movs	r3, #0
 8004020:	e054      	b.n	80040cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <osThreadNew+0xa8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b5b      	cmp	r3, #91	; 0x5b
 8004040:	d90a      	bls.n	8004058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <osThreadNew+0xa8>
        mem = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e010      	b.n	800407a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10c      	bne.n	800407a <osThreadNew+0xca>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <osThreadNew+0xca>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <osThreadNew+0xca>
          mem = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e001      	b.n	800407a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d110      	bne.n	80040a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004088:	9202      	str	r2, [sp, #8]
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f001 fa42 	bl	8005520 <xTaskCreateStatic>
 800409c:	4603      	mov	r3, r0
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	e013      	b.n	80040ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d110      	bne.n	80040ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	f107 0310 	add.w	r3, r7, #16
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f001 fa8d 	bl	80055da <xTaskCreate>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <osThreadNew+0x11a>
            hTask = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040ca:	693b      	ldr	r3, [r7, #16]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040dc:	f3ef 8305 	mrs	r3, IPSR
 80040e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <osDelay+0x1c>
    stat = osErrorISR;
 80040e8:	f06f 0305 	mvn.w	r3, #5
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e007      	b.n	8004100 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <osDelay+0x2c>
      vTaskDelay(ticks);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fbb2 	bl	8005864 <vTaskDelay>
    }
  }

  return (stat);
 8004100:	68fb      	ldr	r3, [r7, #12]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a07      	ldr	r2, [pc, #28]	; (8004138 <vApplicationGetIdleTaskMemory+0x2c>)
 800411c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4a06      	ldr	r2, [pc, #24]	; (800413c <vApplicationGetIdleTaskMemory+0x30>)
 8004122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	601a      	str	r2, [r3, #0]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2000019c 	.word	0x2000019c
 800413c:	200001f8 	.word	0x200001f8

08004140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a07      	ldr	r2, [pc, #28]	; (800416c <vApplicationGetTimerTaskMemory+0x2c>)
 8004150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4a06      	ldr	r2, [pc, #24]	; (8004170 <vApplicationGetTimerTaskMemory+0x30>)
 8004156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800415e:	601a      	str	r2, [r3, #0]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	200003f8 	.word	0x200003f8
 8004170:	20000454 	.word	0x20000454

08004174 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004180:	f001 fc0a 	bl	8005998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <pvPortMalloc+0x180>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800418c:	f000 f920 	bl	80043d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <pvPortMalloc+0x184>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8093 	bne.w	80042c4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01d      	beq.n	80041e0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041a4:	2208      	movs	r2, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d014      	beq.n	80041e0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	3308      	adds	r3, #8
 80041be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d06e      	beq.n	80042c4 <pvPortMalloc+0x150>
 80041e6:	4b45      	ldr	r3, [pc, #276]	; (80042fc <pvPortMalloc+0x188>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d869      	bhi.n	80042c4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041f0:	4b43      	ldr	r3, [pc, #268]	; (8004300 <pvPortMalloc+0x18c>)
 80041f2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041f4:	4b42      	ldr	r3, [pc, #264]	; (8004300 <pvPortMalloc+0x18c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041fa:	e004      	b.n	8004206 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d903      	bls.n	8004218 <pvPortMalloc+0xa4>
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f1      	bne.n	80041fc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004218:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <pvPortMalloc+0x180>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	d050      	beq.n	80042c4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2208      	movs	r2, #8
 8004228:	4413      	add	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	2308      	movs	r3, #8
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	429a      	cmp	r2, r3
 8004242:	d91f      	bls.n	8004284 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <pvPortMalloc+0xf8>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	613b      	str	r3, [r7, #16]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800427e:	69b8      	ldr	r0, [r7, #24]
 8004280:	f000 f908 	bl	8004494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <pvPortMalloc+0x188>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <pvPortMalloc+0x188>)
 8004290:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <pvPortMalloc+0x188>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <pvPortMalloc+0x190>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d203      	bcs.n	80042a6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <pvPortMalloc+0x188>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <pvPortMalloc+0x190>)
 80042a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <pvPortMalloc+0x184>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042ba:	4b13      	ldr	r3, [pc, #76]	; (8004308 <pvPortMalloc+0x194>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <pvPortMalloc+0x194>)
 80042c2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042c4:	f001 fb76 	bl	80059b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <pvPortMalloc+0x174>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60fb      	str	r3, [r7, #12]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <pvPortMalloc+0x172>
	return pvReturn;
 80042e8:	69fb      	ldr	r3, [r7, #28]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3728      	adds	r7, #40	; 0x28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000445c 	.word	0x2000445c
 80042f8:	20004470 	.word	0x20004470
 80042fc:	20004460 	.word	0x20004460
 8004300:	20004454 	.word	0x20004454
 8004304:	20004464 	.word	0x20004464
 8004308:	20004468 	.word	0x20004468

0800430c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d04d      	beq.n	80043ba <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800431e:	2308      	movs	r3, #8
 8004320:	425b      	negs	r3, r3
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <vPortFree+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <vPortFree+0x44>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60fb      	str	r3, [r7, #12]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <vPortFree+0x62>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60bb      	str	r3, [r7, #8]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <vPortFree+0xb8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01e      	beq.n	80043ba <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11a      	bne.n	80043ba <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <vPortFree+0xb8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004394:	f001 fb00 	bl	8005998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <vPortFree+0xbc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <vPortFree+0xbc>)
 80043a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043a6:	6938      	ldr	r0, [r7, #16]
 80043a8:	f000 f874 	bl	8004494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <vPortFree+0xc0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a06      	ldr	r2, [pc, #24]	; (80043cc <vPortFree+0xc0>)
 80043b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043b6:	f001 fafd 	bl	80059b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20004470 	.word	0x20004470
 80043c8:	20004460 	.word	0x20004460
 80043cc:	2000446c 	.word	0x2000446c

080043d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043dc:	4b27      	ldr	r3, [pc, #156]	; (800447c <prvHeapInit+0xac>)
 80043de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3307      	adds	r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	4a1f      	ldr	r2, [pc, #124]	; (800447c <prvHeapInit+0xac>)
 8004400:	4413      	add	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004408:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <prvHeapInit+0xb0>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <prvHeapInit+0xb0>)
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	4413      	add	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800441c:	2208      	movs	r2, #8
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <prvHeapInit+0xb4>)
 8004430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <prvHeapInit+0xb4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <prvHeapInit+0xb4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	1ad2      	subs	r2, r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvHeapInit+0xb4>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <prvHeapInit+0xb8>)
 800445e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a09      	ldr	r2, [pc, #36]	; (800448c <prvHeapInit+0xbc>)
 8004466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <prvHeapInit+0xc0>)
 800446a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	20000854 	.word	0x20000854
 8004480:	20004454 	.word	0x20004454
 8004484:	2000445c 	.word	0x2000445c
 8004488:	20004464 	.word	0x20004464
 800448c:	20004460 	.word	0x20004460
 8004490:	20004470 	.word	0x20004470

08004494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <prvInsertBlockIntoFreeList+0xac>)
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e002      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x14>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d8f7      	bhi.n	80044a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d108      	bne.n	80044d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	441a      	add	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d118      	bne.n	800451c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <prvInsertBlockIntoFreeList+0xb0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d00d      	beq.n	8004512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e008      	b.n	8004524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <prvInsertBlockIntoFreeList+0xb0>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e003      	b.n	8004524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d002      	beq.n	8004532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20004454 	.word	0x20004454
 8004544:	2000445c 	.word	0x2000445c

08004548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f103 0208 	add.w	r2, r3, #8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f103 0208 	add.w	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f103 0208 	add.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004600:	d103      	bne.n	800460a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e00c      	b.n	8004624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3308      	adds	r3, #8
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <vListInsert+0x2e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	d2f6      	bcs.n	8004612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6892      	ldr	r2, [r2, #8]
 8004672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6852      	ldr	r2, [r2, #4]
 800467c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d103      	bne.n	8004690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	1e5a      	subs	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b04      	subs	r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b04      	subs	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b04      	subs	r3, #4
 80046de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046e0:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <pxPortInitialiseStack+0x64>)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b14      	subs	r3, #20
 80046ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3b04      	subs	r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f06f 0202 	mvn.w	r2, #2
 80046fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b20      	subs	r3, #32
 8004704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	08004719 	.word	0x08004719

08004718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <prvTaskExitError+0x54>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472a:	d00a      	beq.n	8004742 <prvTaskExitError+0x2a>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <prvTaskExitError+0x28>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004756:	bf00      	nop
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0fc      	beq.n	8004758 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	2000000c 	.word	0x2000000c

08004770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	200044bc 	.word	0x200044bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <prvPortStartFirstTask+0x24>)
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f380 8808 	msr	MSP, r0
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8814 	msr	CONTROL, r0
 80047aa:	b662      	cpsie	i
 80047ac:	b661      	cpsie	f
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	df00      	svc	0
 80047b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ba:	bf00      	nop
 80047bc:	e000ed08 	.word	0xe000ed08

080047c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047c6:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <xPortStartScheduler+0x120>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a46      	ldr	r2, [pc, #280]	; (80048e4 <xPortStartScheduler+0x124>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10a      	bne.n	80047e6 <xPortStartScheduler+0x26>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	613b      	str	r3, [r7, #16]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <xPortStartScheduler+0x120>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <xPortStartScheduler+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10a      	bne.n	8004806 <xPortStartScheduler+0x46>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <xPortStartScheduler+0x12c>)
 8004808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <xPortStartScheduler+0x130>)
 800482c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <xPortStartScheduler+0x134>)
 8004830:	2207      	movs	r2, #7
 8004832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004834:	e009      	b.n	800484a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <xPortStartScheduler+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	4a2d      	ldr	r2, [pc, #180]	; (80048f4 <xPortStartScheduler+0x134>)
 800483e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d0ef      	beq.n	8004836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <xPortStartScheduler+0x134>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1c3 0307 	rsb	r3, r3, #7
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00a      	beq.n	8004878 <xPortStartScheduler+0xb8>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <xPortStartScheduler+0x134>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <xPortStartScheduler+0x134>)
 8004880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <xPortStartScheduler+0x134>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488a:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <xPortStartScheduler+0x134>)
 800488c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004896:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <xPortStartScheduler+0x138>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <xPortStartScheduler+0x138>)
 800489c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <xPortStartScheduler+0x138>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <xPortStartScheduler+0x138>)
 80048a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048ae:	f000 f8dd 	bl	8004a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <xPortStartScheduler+0x13c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048b8:	f000 f8fc 	bl	8004ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <xPortStartScheduler+0x140>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <xPortStartScheduler+0x140>)
 80048c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048c8:	f7ff ff66 	bl	8004798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048cc:	f001 f9da 	bl	8005c84 <vTaskSwitchContext>
	prvTaskExitError();
 80048d0:	f7ff ff22 	bl	8004718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	e000ed00 	.word	0xe000ed00
 80048e4:	410fc271 	.word	0x410fc271
 80048e8:	410fc270 	.word	0x410fc270
 80048ec:	e000e400 	.word	0xe000e400
 80048f0:	20004474 	.word	0x20004474
 80048f4:	20004478 	.word	0x20004478
 80048f8:	e000ed20 	.word	0xe000ed20
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	e000ef34 	.word	0xe000ef34

08004904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
}
 800491c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <vPortEnterCritical+0x58>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <vPortEnterCritical+0x58>)
 8004926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <vPortEnterCritical+0x58>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10f      	bne.n	8004950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortEnterCritical+0x5c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <vPortEnterCritical+0x4c>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <vPortEnterCritical+0x4a>
	}
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	2000000c 	.word	0x2000000c
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <vPortExitCritical+0x50>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vPortExitCritical+0x24>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <vPortExitCritical+0x50>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <vPortExitCritical+0x50>)
 8004990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <vPortExitCritical+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <vPortExitCritical+0x42>
 800499a:	2300      	movs	r3, #0
 800499c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c
	...

080049c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049c0:	f3ef 8009 	mrs	r0, PSP
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <pxCurrentTCBConst>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f01e 0f10 	tst.w	lr, #16
 80049d0:	bf08      	it	eq
 80049d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	6010      	str	r0, [r2, #0]
 80049dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049e4:	f380 8811 	msr	BASEPRI, r0
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f001 f948 	bl	8005c84 <vTaskSwitchContext>
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f380 8811 	msr	BASEPRI, r0
 80049fc:	bc09      	pop	{r0, r3}
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a06:	f01e 0f10 	tst.w	lr, #16
 8004a0a:	bf08      	it	eq
 8004a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a10:	f380 8809 	msr	PSP, r0
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst>:
 8004a20:	200044bc 	.word	0x200044bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
}
 8004a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a42:	f001 f865 	bl	8005b10 <xTaskIncrementTick>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <xPortSysTickHandler+0x40>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f383 8811 	msr	BASEPRI, r3
}
 8004a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <vPortSetupTimerInterrupt+0x38>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <vPortSetupTimerInterrupt+0x3c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <vPortSetupTimerInterrupt+0x40>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <vPortSetupTimerInterrupt+0x44>)
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010
 8004aa4:	e000e018 	.word	0xe000e018
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	10624dd3 	.word	0x10624dd3
 8004ab0:	e000e014 	.word	0xe000e014

08004ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ac4 <vPortEnableVFP+0x10>
 8004ab8:	6801      	ldr	r1, [r0, #0]
 8004aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004abe:	6001      	str	r1, [r0, #0]
 8004ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ac2:	bf00      	nop
 8004ac4:	e000ed88 	.word	0xe000ed88

08004ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ace:	f3ef 8305 	mrs	r3, IPSR
 8004ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b0f      	cmp	r3, #15
 8004ad8:	d914      	bls.n	8004b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <vPortValidateInterruptPriority+0x70>)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <vPortValidateInterruptPriority+0x74>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	7afa      	ldrb	r2, [r7, #11]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d20a      	bcs.n	8004b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	607b      	str	r3, [r7, #4]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <vPortValidateInterruptPriority+0x78>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <vPortValidateInterruptPriority+0x7c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d90a      	bls.n	8004b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	603b      	str	r3, [r7, #0]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <vPortValidateInterruptPriority+0x60>
	}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e3f0 	.word	0xe000e3f0
 8004b3c:	20004474 	.word	0x20004474
 8004b40:	e000ed0c 	.word	0xe000ed0c
 8004b44:	20004478 	.word	0x20004478

08004b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericReset+0x2a>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	60bb      	str	r3, [r7, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b72:	f7ff fec7 	bl	8004904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	441a      	add	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	441a      	add	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	22ff      	movs	r2, #255	; 0xff
 8004bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d114      	bne.n	8004bf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3310      	adds	r3, #16
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 f903 	bl	8005de0 <xTaskRemoveFromEventList>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <xQueueGenericReset+0xcc>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	e009      	b.n	8004c06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3310      	adds	r3, #16
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fca6 	bl	8004548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fca1 	bl	8004548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c06:	f7ff fead 	bl	8004964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c0a:	2301      	movs	r3, #1
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08e      	sub	sp, #56	; 0x38
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <xQueueGenericCreateStatic+0x52>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <xQueueGenericCreateStatic+0x56>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <xQueueGenericCreateStatic+0x58>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	623b      	str	r3, [r7, #32]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <xQueueGenericCreateStatic+0x7e>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericCreateStatic+0x82>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericCreateStatic+0x84>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	61fb      	str	r3, [r7, #28]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cb6:	2350      	movs	r3, #80	; 0x50
 8004cb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b50      	cmp	r3, #80	; 0x50
 8004cbe:	d00a      	beq.n	8004cd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61bb      	str	r3, [r7, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f805 	bl	8004d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3730      	adds	r7, #48	; 0x30
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d36:	2101      	movs	r1, #1
 8004d38:	69b8      	ldr	r0, [r7, #24]
 8004d3a:	f7ff ff05 	bl	8004b48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	; 0x38
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <xQueueGenericSend+0x32>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <xQueueGenericSend+0x40>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <xQueueGenericSend+0x44>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <xQueueGenericSend+0x46>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <xQueueGenericSend+0x60>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d103      	bne.n	8004dbe <xQueueGenericSend+0x6e>
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <xQueueGenericSend+0x72>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <xQueueGenericSend+0x74>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xQueueGenericSend+0x8e>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	623b      	str	r3, [r7, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dde:	f001 f9bd 	bl	800615c <xTaskGetSchedulerState>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <xQueueGenericSend+0x9e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <xQueueGenericSend+0xa2>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <xQueueGenericSend+0xa4>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xQueueGenericSend+0xbe>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	61fb      	str	r3, [r7, #28]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e0e:	f7ff fd79 	bl	8004904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <xQueueGenericSend+0xd4>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d129      	bne.n	8004e78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2a:	f000 fa0b 	bl	8005244 <prvCopyDataToQueue>
 8004e2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	3324      	adds	r3, #36	; 0x24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 ffcf 	bl	8005de0 <xTaskRemoveFromEventList>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <xQueueGenericSend+0x1f8>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	e00a      	b.n	8004e70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e60:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <xQueueGenericSend+0x1f8>)
 8004e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e70:	f7ff fd78 	bl	8004964 <vPortExitCritical>
				return pdPASS;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e063      	b.n	8004f40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e7e:	f7ff fd71 	bl	8004964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e05c      	b.n	8004f40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 f809 	bl	8005ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e96:	2301      	movs	r3, #1
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e9a:	f7ff fd63 	bl	8004964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e9e:	f000 fd7b 	bl	8005998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ea2:	f7ff fd2f 	bl	8004904 <vPortEnterCritical>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb2:	d103      	bne.n	8004ebc <xQueueGenericSend+0x16c>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSend+0x182>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed2:	f7ff fd47 	bl	8004964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ed6:	1d3a      	adds	r2, r7, #4
 8004ed8:	f107 0314 	add.w	r3, r7, #20
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fff8 	bl	8005ed4 <xTaskCheckForTimeOut>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d124      	bne.n	8004f34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eec:	f000 faa2 	bl	8005434 <prvIsQueueFull>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	3310      	adds	r3, #16
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 ff1e 	bl	8005d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f06:	f000 fa2d 	bl	8005364 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f0a:	f000 fd53 	bl	80059b4 <xTaskResumeAll>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f47f af7c 	bne.w	8004e0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <xQueueGenericSend+0x1f8>)
 8004f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	e772      	b.n	8004e0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f2a:	f000 fa1b 	bl	8005364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f2e:	f000 fd41 	bl	80059b4 <xTaskResumeAll>
 8004f32:	e76c      	b.n	8004e0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f36:	f000 fa15 	bl	8005364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f3a:	f000 fd3b 	bl	80059b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3738      	adds	r7, #56	; 0x38
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b090      	sub	sp, #64	; 0x40
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <xQueueGenericSendFromISR+0x3c>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <xQueueGenericSendFromISR+0x40>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <xQueueGenericSendFromISR+0x42>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d103      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x6a>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <xQueueGenericSendFromISR+0x6e>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <xQueueGenericSendFromISR+0x70>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	623b      	str	r3, [r7, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fd6:	f7ff fd77 	bl	8004ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8004fda:	f3ef 8211 	mrs	r2, BASEPRI
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61fa      	str	r2, [r7, #28]
 8004ff0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <xQueueGenericSendFromISR+0xbc>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d12f      	bne.n	8005068 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800501e:	f000 f911 	bl	8005244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005022:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502a:	d112      	bne.n	8005052 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d016      	beq.n	8005062 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	3324      	adds	r3, #36	; 0x24
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fed1 	bl	8005de0 <xTaskRemoveFromEventList>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e007      	b.n	8005062 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005056:	3301      	adds	r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	b25a      	sxtb	r2, r3
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005062:	2301      	movs	r3, #1
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005066:	e001      	b.n	800506c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005068:	2300      	movs	r3, #0
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f383 8811 	msr	BASEPRI, r3
}
 8005076:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800507a:	4618      	mov	r0, r3
 800507c:	3740      	adds	r7, #64	; 0x40
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	; 0x30
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <xQueueReceive+0x30>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	623b      	str	r3, [r7, #32]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueReceive+0x3e>
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <xQueueReceive+0x42>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueReceive+0x44>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xQueueReceive+0x5e>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61fb      	str	r3, [r7, #28]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e2:	f001 f83b 	bl	800615c <xTaskGetSchedulerState>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <xQueueReceive+0x6e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <xQueueReceive+0x72>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueReceive+0x74>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueReceive+0x8e>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61bb      	str	r3, [r7, #24]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005112:	f7ff fbf7 	bl	8004904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01f      	beq.n	8005162 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005126:	f000 f8f7 	bl	8005318 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1e5a      	subs	r2, r3, #1
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00f      	beq.n	800515a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	3310      	adds	r3, #16
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fe4e 	bl	8005de0 <xTaskRemoveFromEventList>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <xQueueReceive+0x1bc>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800515a:	f7ff fc03 	bl	8004964 <vPortExitCritical>
				return pdPASS;
 800515e:	2301      	movs	r3, #1
 8005160:	e069      	b.n	8005236 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005168:	f7ff fbfc 	bl	8004964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800516c:	2300      	movs	r3, #0
 800516e:	e062      	b.n	8005236 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fe94 	bl	8005ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005184:	f7ff fbee 	bl	8004964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005188:	f000 fc06 	bl	8005998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800518c:	f7ff fbba 	bl	8004904 <vPortEnterCritical>
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005196:	b25b      	sxtb	r3, r3
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519c:	d103      	bne.n	80051a6 <xQueueReceive+0x122>
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b2:	d103      	bne.n	80051bc <xQueueReceive+0x138>
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051bc:	f7ff fbd2 	bl	8004964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051c0:	1d3a      	adds	r2, r7, #4
 80051c2:	f107 0310 	add.w	r3, r7, #16
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fe83 	bl	8005ed4 <xTaskCheckForTimeOut>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d123      	bne.n	800521c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d6:	f000 f917 	bl	8005408 <prvIsQueueEmpty>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d017      	beq.n	8005210 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fda9 	bl	8005d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f0:	f000 f8b8 	bl	8005364 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051f4:	f000 fbde 	bl	80059b4 <xTaskResumeAll>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d189      	bne.n	8005112 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <xQueueReceive+0x1bc>)
 8005200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	e780      	b.n	8005112 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005212:	f000 f8a7 	bl	8005364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005216:	f000 fbcd 	bl	80059b4 <xTaskResumeAll>
 800521a:	e77a      	b.n	8005112 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800521c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800521e:	f000 f8a1 	bl	8005364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005222:	f000 fbc7 	bl	80059b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005228:	f000 f8ee 	bl	8005408 <prvIsQueueEmpty>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	f43f af6f 	beq.w	8005112 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005236:	4618      	mov	r0, r3
 8005238:	3730      	adds	r7, #48	; 0x30
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d14d      	bne.n	8005306 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 ff92 	bl	8006198 <xTaskPriorityDisinherit>
 8005274:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	e043      	b.n	8005306 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d119      	bne.n	80052b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6858      	ldr	r0, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	461a      	mov	r2, r3
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	f001 fd3e 	bl	8006d10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	441a      	add	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d32b      	bcc.n	8005306 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	e026      	b.n	8005306 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68d8      	ldr	r0, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	461a      	mov	r2, r3
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	f001 fd24 	bl	8006d10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	425b      	negs	r3, r3
 80052d2:	441a      	add	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d207      	bcs.n	80052f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	425b      	negs	r3, r3
 80052ee:	441a      	add	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d105      	bne.n	8005306 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3b01      	subs	r3, #1
 8005304:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800530e:	697b      	ldr	r3, [r7, #20]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d018      	beq.n	800535c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	441a      	add	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	d303      	bcc.n	800534c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68d9      	ldr	r1, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	461a      	mov	r2, r3
 8005356:	6838      	ldr	r0, [r7, #0]
 8005358:	f001 fcda 	bl	8006d10 <memcpy>
	}
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800536c:	f7ff faca 	bl	8004904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005376:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005378:	e011      	b.n	800539e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d012      	beq.n	80053a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3324      	adds	r3, #36	; 0x24
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fd2a 	bl	8005de0 <xTaskRemoveFromEventList>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005392:	f000 fe01 	bl	8005f98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	3b01      	subs	r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800539e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dce9      	bgt.n	800537a <prvUnlockQueue+0x16>
 80053a6:	e000      	b.n	80053aa <prvUnlockQueue+0x46>
					break;
 80053a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053b2:	f7ff fad7 	bl	8004964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053b6:	f7ff faa5 	bl	8004904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053c2:	e011      	b.n	80053e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d012      	beq.n	80053f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3310      	adds	r3, #16
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fd05 	bl	8005de0 <xTaskRemoveFromEventList>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053dc:	f000 fddc 	bl	8005f98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dce9      	bgt.n	80053c4 <prvUnlockQueue+0x60>
 80053f0:	e000      	b.n	80053f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053fc:	f7ff fab2 	bl	8004964 <vPortExitCritical>
}
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005410:	f7ff fa78 	bl	8004904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e001      	b.n	8005426 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005426:	f7ff fa9d 	bl	8004964 <vPortExitCritical>

	return xReturn;
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800543c:	f7ff fa62 	bl	8004904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	429a      	cmp	r2, r3
 800544a:	d102      	bne.n	8005452 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e001      	b.n	8005456 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005456:	f7ff fa85 	bl	8004964 <vPortExitCritical>

	return xReturn;
 800545a:	68fb      	ldr	r3, [r7, #12]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e014      	b.n	800549e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005474:	4a0f      	ldr	r2, [pc, #60]	; (80054b4 <vQueueAddToRegistry+0x50>)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005480:	490c      	ldr	r1, [pc, #48]	; (80054b4 <vQueueAddToRegistry+0x50>)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <vQueueAddToRegistry+0x50>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005496:	e006      	b.n	80054a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b07      	cmp	r3, #7
 80054a2:	d9e7      	bls.n	8005474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	2000447c 	.word	0x2000447c

080054b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054c8:	f7ff fa1c 	bl	8004904 <vPortEnterCritical>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d8:	d103      	bne.n	80054e2 <vQueueWaitForMessageRestricted+0x2a>
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e8:	b25b      	sxtb	r3, r3
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ee:	d103      	bne.n	80054f8 <vQueueWaitForMessageRestricted+0x40>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f8:	f7ff fa34 	bl	8004964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fc3b 	bl	8005d88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005512:	6978      	ldr	r0, [r7, #20]
 8005514:	f7ff ff26 	bl	8005364 <prvUnlockQueue>
	}
 8005518:	bf00      	nop
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af04      	add	r7, sp, #16
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	623b      	str	r3, [r7, #32]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xTaskCreateStatic+0x46>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fb      	str	r3, [r7, #28]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005566:	235c      	movs	r3, #92	; 0x5c
 8005568:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b5c      	cmp	r3, #92	; 0x5c
 800556e:	d00a      	beq.n	8005586 <xTaskCreateStatic+0x66>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	61bb      	str	r3, [r7, #24]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005586:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01e      	beq.n	80055cc <xTaskCreateStatic+0xac>
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800559c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	2202      	movs	r2, #2
 80055a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055a6:	2300      	movs	r3, #0
 80055a8:	9303      	str	r3, [sp, #12]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	9302      	str	r3, [sp, #8]
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f850 	bl	8005664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c6:	f000 f8dd 	bl	8005784 <prvAddNewTaskToReadyList>
 80055ca:	e001      	b.n	80055d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055d0:	697b      	ldr	r3, [r7, #20]
	}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3728      	adds	r7, #40	; 0x28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08c      	sub	sp, #48	; 0x30
 80055de:	af04      	add	r7, sp, #16
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fdc0 	bl	8004174 <pvPortMalloc>
 80055f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055fc:	205c      	movs	r0, #92	; 0x5c
 80055fe:	f7fe fdb9 	bl	8004174 <pvPortMalloc>
 8005602:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
 8005610:	e005      	b.n	800561e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	f7fe fe7a 	bl	800430c <vPortFree>
 8005618:	e001      	b.n	800561e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d017      	beq.n	8005654 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	2300      	movs	r3, #0
 8005630:	9303      	str	r3, [sp, #12]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	9302      	str	r3, [sp, #8]
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f80e 	bl	8005664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005648:	69f8      	ldr	r0, [r7, #28]
 800564a:	f000 f89b 	bl	8005784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800564e:	2301      	movs	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e002      	b.n	800565a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005658:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800565a:	69bb      	ldr	r3, [r7, #24]
	}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	461a      	mov	r2, r3
 800567c:	21a5      	movs	r1, #165	; 0xa5
 800567e:	f001 fabf 	bl	8006c00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800568c:	3b01      	subs	r3, #1
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	617b      	str	r3, [r7, #20]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01f      	beq.n	8005702 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e012      	b.n	80056ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	7819      	ldrb	r1, [r3, #0]
 80056d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	3334      	adds	r3, #52	; 0x34
 80056d8:	460a      	mov	r2, r1
 80056da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d006      	beq.n	80056f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d9e9      	bls.n	80056c8 <prvInitialiseNewTask+0x64>
 80056f4:	e000      	b.n	80056f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80056f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005700:	e003      	b.n	800570a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	2b37      	cmp	r3, #55	; 0x37
 800570e:	d901      	bls.n	8005714 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005710:	2337      	movs	r3, #55	; 0x37
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005718:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800571e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	2200      	movs	r2, #0
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	3304      	adds	r3, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe ff2c 	bl	8004588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	3318      	adds	r3, #24
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe ff27 	bl	8004588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2200      	movs	r2, #0
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	68f9      	ldr	r1, [r7, #12]
 8005762:	69b8      	ldr	r0, [r7, #24]
 8005764:	f7fe ffa4 	bl	80046b0 <pxPortInitialiseStack>
 8005768:	4602      	mov	r2, r0
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800577a:	bf00      	nop
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800578c:	f7ff f8ba 	bl	8004904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <prvAddNewTaskToReadyList+0xc4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	4a2c      	ldr	r2, [pc, #176]	; (8005848 <prvAddNewTaskToReadyList+0xc4>)
 8005798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800579a:	4b2c      	ldr	r3, [pc, #176]	; (800584c <prvAddNewTaskToReadyList+0xc8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057a2:	4a2a      	ldr	r2, [pc, #168]	; (800584c <prvAddNewTaskToReadyList+0xc8>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <prvAddNewTaskToReadyList+0xc4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d110      	bne.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057b0:	f000 fc16 	bl	8005fe0 <prvInitialiseTaskLists>
 80057b4:	e00d      	b.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057b6:	4b26      	ldr	r3, [pc, #152]	; (8005850 <prvAddNewTaskToReadyList+0xcc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057be:	4b23      	ldr	r3, [pc, #140]	; (800584c <prvAddNewTaskToReadyList+0xc8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d802      	bhi.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057cc:	4a1f      	ldr	r2, [pc, #124]	; (800584c <prvAddNewTaskToReadyList+0xc8>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <prvAddNewTaskToReadyList+0xd0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <prvAddNewTaskToReadyList+0xd0>)
 80057da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057dc:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <prvAddNewTaskToReadyList+0xd0>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <prvAddNewTaskToReadyList+0xd4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d903      	bls.n	80057f8 <prvAddNewTaskToReadyList+0x74>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a18      	ldr	r2, [pc, #96]	; (8005858 <prvAddNewTaskToReadyList+0xd4>)
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <prvAddNewTaskToReadyList+0xd8>)
 8005806:	441a      	add	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7fe fec7 	bl	80045a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005814:	f7ff f8a6 	bl	8004964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <prvAddNewTaskToReadyList+0xcc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00e      	beq.n	800583e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <prvAddNewTaskToReadyList+0xc8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	429a      	cmp	r2, r3
 800582c:	d207      	bcs.n	800583e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <prvAddNewTaskToReadyList+0xdc>)
 8005830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20004990 	.word	0x20004990
 800584c:	200044bc 	.word	0x200044bc
 8005850:	2000499c 	.word	0x2000499c
 8005854:	200049ac 	.word	0x200049ac
 8005858:	20004998 	.word	0x20004998
 800585c:	200044c0 	.word	0x200044c0
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <vTaskDelay+0x60>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <vTaskDelay+0x30>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60bb      	str	r3, [r7, #8]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005894:	f000 f880 	bl	8005998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005898:	2100      	movs	r1, #0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fcea 	bl	8006274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058a0:	f000 f888 	bl	80059b4 <xTaskResumeAll>
 80058a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <vTaskDelay+0x64>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	200049b8 	.word	0x200049b8
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058da:	463a      	mov	r2, r7
 80058dc:	1d39      	adds	r1, r7, #4
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fc12 	bl	800410c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	9202      	str	r2, [sp, #8]
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	2300      	movs	r3, #0
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2300      	movs	r3, #0
 80058f8:	460a      	mov	r2, r1
 80058fa:	4921      	ldr	r1, [pc, #132]	; (8005980 <vTaskStartScheduler+0xb4>)
 80058fc:	4821      	ldr	r0, [pc, #132]	; (8005984 <vTaskStartScheduler+0xb8>)
 80058fe:	f7ff fe0f 	bl	8005520 <xTaskCreateStatic>
 8005902:	4603      	mov	r3, r0
 8005904:	4a20      	ldr	r2, [pc, #128]	; (8005988 <vTaskStartScheduler+0xbc>)
 8005906:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005908:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <vTaskStartScheduler+0xbc>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e001      	b.n	800591a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005920:	f000 fcfc 	bl	800631c <xTimerCreateTimerTask>
 8005924:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d116      	bne.n	800595a <vTaskStartScheduler+0x8e>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	613b      	str	r3, [r7, #16]
}
 800593e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <vTaskStartScheduler+0xc0>)
 8005942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005946:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <vTaskStartScheduler+0xc4>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <vTaskStartScheduler+0xc8>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005954:	f7fe ff34 	bl	80047c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005958:	e00e      	b.n	8005978 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005960:	d10a      	bne.n	8005978 <vTaskStartScheduler+0xac>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60fb      	str	r3, [r7, #12]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <vTaskStartScheduler+0xaa>
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	08007518 	.word	0x08007518
 8005984:	08005fb1 	.word	0x08005fb1
 8005988:	200049b4 	.word	0x200049b4
 800598c:	200049b0 	.word	0x200049b0
 8005990:	2000499c 	.word	0x2000499c
 8005994:	20004994 	.word	0x20004994

08005998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <vTaskSuspendAll+0x18>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a03      	ldr	r2, [pc, #12]	; (80059b0 <vTaskSuspendAll+0x18>)
 80059a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	200049b8 	.word	0x200049b8

080059b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059c2:	4b42      	ldr	r3, [pc, #264]	; (8005acc <xTaskResumeAll+0x118>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	603b      	str	r3, [r7, #0]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059e0:	f7fe ff90 	bl	8004904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059e4:	4b39      	ldr	r3, [pc, #228]	; (8005acc <xTaskResumeAll+0x118>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	4a38      	ldr	r2, [pc, #224]	; (8005acc <xTaskResumeAll+0x118>)
 80059ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ee:	4b37      	ldr	r3, [pc, #220]	; (8005acc <xTaskResumeAll+0x118>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d162      	bne.n	8005abc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059f6:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <xTaskResumeAll+0x11c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d05e      	beq.n	8005abc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fe:	e02f      	b.n	8005a60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a00:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <xTaskResumeAll+0x120>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe fe25 	bl	800465c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fe20 	bl	800465c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <xTaskResumeAll+0x124>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d903      	bls.n	8005a30 <xTaskResumeAll+0x7c>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <xTaskResumeAll+0x124>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a27      	ldr	r2, [pc, #156]	; (8005adc <xTaskResumeAll+0x128>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7fe fdab 	bl	80045a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <xTaskResumeAll+0x12c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <xTaskResumeAll+0x130>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a60:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <xTaskResumeAll+0x120>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1cb      	bne.n	8005a00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a6e:	f000 fb55 	bl	800611c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <xTaskResumeAll+0x134>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a7e:	f000 f847 	bl	8005b10 <xTaskIncrementTick>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a88:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <xTaskResumeAll+0x130>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f1      	bne.n	8005a7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <xTaskResumeAll+0x134>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aa0:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <xTaskResumeAll+0x130>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <xTaskResumeAll+0x138>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005abc:	f7fe ff52 	bl	8004964 <vPortExitCritical>

	return xAlreadyYielded;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200049b8 	.word	0x200049b8
 8005ad0:	20004990 	.word	0x20004990
 8005ad4:	20004950 	.word	0x20004950
 8005ad8:	20004998 	.word	0x20004998
 8005adc:	200044c0 	.word	0x200044c0
 8005ae0:	200044bc 	.word	0x200044bc
 8005ae4:	200049a4 	.word	0x200049a4
 8005ae8:	200049a0 	.word	0x200049a0
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <xTaskGetTickCount+0x1c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005afc:	687b      	ldr	r3, [r7, #4]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20004994 	.word	0x20004994

08005b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b1a:	4b4f      	ldr	r3, [pc, #316]	; (8005c58 <xTaskIncrementTick+0x148>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 808f 	bne.w	8005c42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b24:	4b4d      	ldr	r3, [pc, #308]	; (8005c5c <xTaskIncrementTick+0x14c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b2c:	4a4b      	ldr	r2, [pc, #300]	; (8005c5c <xTaskIncrementTick+0x14c>)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d120      	bne.n	8005b7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b38:	4b49      	ldr	r3, [pc, #292]	; (8005c60 <xTaskIncrementTick+0x150>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	603b      	str	r3, [r7, #0]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xTaskIncrementTick+0x46>
 8005b58:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <xTaskIncrementTick+0x150>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	4b41      	ldr	r3, [pc, #260]	; (8005c64 <xTaskIncrementTick+0x154>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a3f      	ldr	r2, [pc, #252]	; (8005c60 <xTaskIncrementTick+0x150>)
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	4a3f      	ldr	r2, [pc, #252]	; (8005c64 <xTaskIncrementTick+0x154>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b3e      	ldr	r3, [pc, #248]	; (8005c68 <xTaskIncrementTick+0x158>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	4a3d      	ldr	r2, [pc, #244]	; (8005c68 <xTaskIncrementTick+0x158>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	f000 fad1 	bl	800611c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b7a:	4b3c      	ldr	r3, [pc, #240]	; (8005c6c <xTaskIncrementTick+0x15c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d349      	bcc.n	8005c18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b84:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <xTaskIncrementTick+0x150>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8e:	4b37      	ldr	r3, [pc, #220]	; (8005c6c <xTaskIncrementTick+0x15c>)
 8005b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b94:	601a      	str	r2, [r3, #0]
					break;
 8005b96:	e03f      	b.n	8005c18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <xTaskIncrementTick+0x150>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d203      	bcs.n	8005bb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bb0:	4a2e      	ldr	r2, [pc, #184]	; (8005c6c <xTaskIncrementTick+0x15c>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bb6:	e02f      	b.n	8005c18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe fd4d 	bl	800465c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3318      	adds	r3, #24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fd44 	bl	800465c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd8:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <xTaskIncrementTick+0x160>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d903      	bls.n	8005be8 <xTaskIncrementTick+0xd8>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <xTaskIncrementTick+0x160>)
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	; (8005c74 <xTaskIncrementTick+0x164>)
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f7fe fccf 	bl	80045a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <xTaskIncrementTick+0x168>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3b8      	bcc.n	8005b84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c16:	e7b5      	b.n	8005b84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c18:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <xTaskIncrementTick+0x168>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4915      	ldr	r1, [pc, #84]	; (8005c74 <xTaskIncrementTick+0x164>)
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d901      	bls.n	8005c34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <xTaskIncrementTick+0x16c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e004      	b.n	8005c4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <xTaskIncrementTick+0x170>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <xTaskIncrementTick+0x170>)
 8005c4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c4c:	697b      	ldr	r3, [r7, #20]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200049b8 	.word	0x200049b8
 8005c5c:	20004994 	.word	0x20004994
 8005c60:	20004948 	.word	0x20004948
 8005c64:	2000494c 	.word	0x2000494c
 8005c68:	200049a8 	.word	0x200049a8
 8005c6c:	200049b0 	.word	0x200049b0
 8005c70:	20004998 	.word	0x20004998
 8005c74:	200044c0 	.word	0x200044c0
 8005c78:	200044bc 	.word	0x200044bc
 8005c7c:	200049a4 	.word	0x200049a4
 8005c80:	200049a0 	.word	0x200049a0

08005c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c8a:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <vTaskSwitchContext+0xa8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c92:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <vTaskSwitchContext+0xac>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c98:	e041      	b.n	8005d1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005c9a:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <vTaskSwitchContext+0xac>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca0:	4b24      	ldr	r3, [pc, #144]	; (8005d34 <vTaskSwitchContext+0xb0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e010      	b.n	8005cca <vTaskSwitchContext+0x46>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <vTaskSwitchContext+0x3e>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	491b      	ldr	r1, [pc, #108]	; (8005d38 <vTaskSwitchContext+0xb4>)
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0e4      	beq.n	8005ca8 <vTaskSwitchContext+0x24>
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <vTaskSwitchContext+0xb4>)
 8005cea:	4413      	add	r3, r2
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d104      	bne.n	8005d0e <vTaskSwitchContext+0x8a>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <vTaskSwitchContext+0xb8>)
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4a06      	ldr	r2, [pc, #24]	; (8005d34 <vTaskSwitchContext+0xb0>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6013      	str	r3, [r2, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	200049b8 	.word	0x200049b8
 8005d30:	200049a4 	.word	0x200049a4
 8005d34:	20004998 	.word	0x20004998
 8005d38:	200044c0 	.word	0x200044c0
 8005d3c:	200044bc 	.word	0x200044bc

08005d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <vTaskPlaceOnEventList+0x44>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3318      	adds	r3, #24
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fe fc3b 	bl	80045ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d74:	2101      	movs	r1, #1
 8005d76:	6838      	ldr	r0, [r7, #0]
 8005d78:	f000 fa7c 	bl	8006274 <prvAddCurrentTaskToDelayedList>
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	200044bc 	.word	0x200044bc

08005d88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	617b      	str	r3, [r7, #20]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <vTaskPlaceOnEventListRestricted+0x54>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3318      	adds	r3, #24
 8005db6:	4619      	mov	r1, r3
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7fe fbf2 	bl	80045a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	68b8      	ldr	r0, [r7, #8]
 8005dce:	f000 fa51 	bl	8006274 <prvAddCurrentTaskToDelayedList>
	}
 8005dd2:	bf00      	nop
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200044bc 	.word	0x200044bc

08005de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	60fb      	str	r3, [r7, #12]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	3318      	adds	r3, #24
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fc23 	bl	800465c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <xTaskRemoveFromEventList+0xb0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11d      	bne.n	8005e5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fc1a 	bl	800465c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <xTaskRemoveFromEventList+0xb4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d903      	bls.n	8005e3c <xTaskRemoveFromEventList+0x5c>
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <xTaskRemoveFromEventList+0xb4>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <xTaskRemoveFromEventList+0xb8>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fba5 	bl	80045a2 <vListInsertEnd>
 8005e58:	e005      	b.n	8005e66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4619      	mov	r1, r3
 8005e60:	480e      	ldr	r0, [pc, #56]	; (8005e9c <xTaskRemoveFromEventList+0xbc>)
 8005e62:	f7fe fb9e 	bl	80045a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <xTaskRemoveFromEventList+0xc0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d905      	bls.n	8005e80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <xTaskRemoveFromEventList+0xc4>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e001      	b.n	8005e84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e84:	697b      	ldr	r3, [r7, #20]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200049b8 	.word	0x200049b8
 8005e94:	20004998 	.word	0x20004998
 8005e98:	200044c0 	.word	0x200044c0
 8005e9c:	20004950 	.word	0x20004950
 8005ea0:	200044bc 	.word	0x200044bc
 8005ea4:	200049a4 	.word	0x200049a4

08005ea8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <vTaskInternalSetTimeOutState+0x24>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <vTaskInternalSetTimeOutState+0x28>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	605a      	str	r2, [r3, #4]
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	200049a8 	.word	0x200049a8
 8005ed0:	20004994 	.word	0x20004994

08005ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	613b      	str	r3, [r7, #16]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f16:	f7fe fcf5 	bl	8004904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <xTaskCheckForTimeOut+0xbc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f32:	d102      	bne.n	8005f3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e023      	b.n	8005f82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <xTaskCheckForTimeOut+0xc0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d007      	beq.n	8005f56 <xTaskCheckForTimeOut+0x82>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d302      	bcc.n	8005f56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	e015      	b.n	8005f82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d20b      	bcs.n	8005f78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ff9b 	bl	8005ea8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e004      	b.n	8005f82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f82:	f7fe fcef 	bl	8004964 <vPortExitCritical>

	return xReturn;
 8005f86:	69fb      	ldr	r3, [r7, #28]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20004994 	.word	0x20004994
 8005f94:	200049a8 	.word	0x200049a8

08005f98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <vTaskMissedYield+0x14>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	200049a4 	.word	0x200049a4

08005fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fb8:	f000 f852 	bl	8006060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <prvIdleTask+0x28>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d9f9      	bls.n	8005fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <prvIdleTask+0x2c>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fd4:	e7f0      	b.n	8005fb8 <prvIdleTask+0x8>
 8005fd6:	bf00      	nop
 8005fd8:	200044c0 	.word	0x200044c0
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	e00c      	b.n	8006006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4a12      	ldr	r2, [pc, #72]	; (8006040 <prvInitialiseTaskLists+0x60>)
 8005ff8:	4413      	add	r3, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe faa4 	bl	8004548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3301      	adds	r3, #1
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b37      	cmp	r3, #55	; 0x37
 800600a:	d9ef      	bls.n	8005fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800600c:	480d      	ldr	r0, [pc, #52]	; (8006044 <prvInitialiseTaskLists+0x64>)
 800600e:	f7fe fa9b 	bl	8004548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006012:	480d      	ldr	r0, [pc, #52]	; (8006048 <prvInitialiseTaskLists+0x68>)
 8006014:	f7fe fa98 	bl	8004548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <prvInitialiseTaskLists+0x6c>)
 800601a:	f7fe fa95 	bl	8004548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800601e:	480c      	ldr	r0, [pc, #48]	; (8006050 <prvInitialiseTaskLists+0x70>)
 8006020:	f7fe fa92 	bl	8004548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006024:	480b      	ldr	r0, [pc, #44]	; (8006054 <prvInitialiseTaskLists+0x74>)
 8006026:	f7fe fa8f 	bl	8004548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <prvInitialiseTaskLists+0x78>)
 800602c:	4a05      	ldr	r2, [pc, #20]	; (8006044 <prvInitialiseTaskLists+0x64>)
 800602e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <prvInitialiseTaskLists+0x7c>)
 8006032:	4a05      	ldr	r2, [pc, #20]	; (8006048 <prvInitialiseTaskLists+0x68>)
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200044c0 	.word	0x200044c0
 8006044:	20004920 	.word	0x20004920
 8006048:	20004934 	.word	0x20004934
 800604c:	20004950 	.word	0x20004950
 8006050:	20004964 	.word	0x20004964
 8006054:	2000497c 	.word	0x2000497c
 8006058:	20004948 	.word	0x20004948
 800605c:	2000494c 	.word	0x2000494c

08006060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006066:	e019      	b.n	800609c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006068:	f7fe fc4c 	bl	8004904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <prvCheckTasksWaitingTermination+0x50>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe faef 	bl	800465c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800607e:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <prvCheckTasksWaitingTermination+0x54>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3b01      	subs	r3, #1
 8006084:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <prvCheckTasksWaitingTermination+0x54>)
 8006086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <prvCheckTasksWaitingTermination+0x58>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3b01      	subs	r3, #1
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <prvCheckTasksWaitingTermination+0x58>)
 8006090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006092:	f7fe fc67 	bl	8004964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f810 	bl	80060bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <prvCheckTasksWaitingTermination+0x58>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e1      	bne.n	8006068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20004964 	.word	0x20004964
 80060b4:	20004990 	.word	0x20004990
 80060b8:	20004978 	.word	0x20004978

080060bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe f91a 	bl	800430c <vPortFree>
				vPortFree( pxTCB );
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fe f917 	bl	800430c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060de:	e018      	b.n	8006112 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d103      	bne.n	80060f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fe f90e 	bl	800430c <vPortFree>
	}
 80060f0:	e00f      	b.n	8006112 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d00a      	beq.n	8006112 <prvDeleteTCB+0x56>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <prvDeleteTCB+0x54>
	}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006122:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <prvResetNextTaskUnblockTime+0x38>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <prvResetNextTaskUnblockTime+0x3c>)
 800612e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006134:	e008      	b.n	8006148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <prvResetNextTaskUnblockTime+0x38>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4a04      	ldr	r2, [pc, #16]	; (8006158 <prvResetNextTaskUnblockTime+0x3c>)
 8006146:	6013      	str	r3, [r2, #0]
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	20004948 	.word	0x20004948
 8006158:	200049b0 	.word	0x200049b0

0800615c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <xTaskGetSchedulerState+0x34>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800616a:	2301      	movs	r3, #1
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	e008      	b.n	8006182 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <xTaskGetSchedulerState+0x38>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006178:	2302      	movs	r3, #2
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	e001      	b.n	8006182 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800617e:	2300      	movs	r3, #0
 8006180:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006182:	687b      	ldr	r3, [r7, #4]
	}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	2000499c 	.word	0x2000499c
 8006194:	200049b8 	.word	0x200049b8

08006198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d056      	beq.n	800625c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061ae:	4b2e      	ldr	r3, [pc, #184]	; (8006268 <xTaskPriorityDisinherit+0xd0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d00a      	beq.n	80061ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	60fb      	str	r3, [r7, #12]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60bb      	str	r3, [r7, #8]
}
 80061e8:	bf00      	nop
 80061ea:	e7fe      	b.n	80061ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f0:	1e5a      	subs	r2, r3, #1
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fe:	429a      	cmp	r2, r3
 8006200:	d02c      	beq.n	800625c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006206:	2b00      	cmp	r3, #0
 8006208:	d128      	bne.n	800625c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3304      	adds	r3, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fa24 	bl	800465c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	4b0f      	ldr	r3, [pc, #60]	; (800626c <xTaskPriorityDisinherit+0xd4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d903      	bls.n	800623c <xTaskPriorityDisinherit+0xa4>
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4a0c      	ldr	r2, [pc, #48]	; (800626c <xTaskPriorityDisinherit+0xd4>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <xTaskPriorityDisinherit+0xd8>)
 800624a:	441a      	add	r2, r3
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	3304      	adds	r3, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f7fe f9a5 	bl	80045a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800625c:	697b      	ldr	r3, [r7, #20]
	}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	200044bc 	.word	0x200044bc
 800626c:	20004998 	.word	0x20004998
 8006270:	200044c0 	.word	0x200044c0

08006274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800627e:	4b21      	ldr	r3, [pc, #132]	; (8006304 <prvAddCurrentTaskToDelayedList+0x90>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006284:	4b20      	ldr	r3, [pc, #128]	; (8006308 <prvAddCurrentTaskToDelayedList+0x94>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3304      	adds	r3, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe f9e6 	bl	800465c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006296:	d10a      	bne.n	80062ae <prvAddCurrentTaskToDelayedList+0x3a>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800629e:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <prvAddCurrentTaskToDelayedList+0x94>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4819      	ldr	r0, [pc, #100]	; (800630c <prvAddCurrentTaskToDelayedList+0x98>)
 80062a8:	f7fe f97b 	bl	80045a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062ac:	e026      	b.n	80062fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <prvAddCurrentTaskToDelayedList+0x94>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d209      	bcs.n	80062da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <prvAddCurrentTaskToDelayedList+0x94>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7fe f989 	bl	80045ea <vListInsert>
}
 80062d8:	e010      	b.n	80062fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f7fe f97f 	bl	80045ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d202      	bcs.n	80062fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062f6:	4a08      	ldr	r2, [pc, #32]	; (8006318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20004994 	.word	0x20004994
 8006308:	200044bc 	.word	0x200044bc
 800630c:	2000497c 	.word	0x2000497c
 8006310:	2000494c 	.word	0x2000494c
 8006314:	20004948 	.word	0x20004948
 8006318:	200049b0 	.word	0x200049b0

0800631c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006326:	f000 fb07 	bl	8006938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800632a:	4b1c      	ldr	r3, [pc, #112]	; (800639c <xTimerCreateTimerTask+0x80>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d021      	beq.n	8006376 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800633a:	1d3a      	adds	r2, r7, #4
 800633c:	f107 0108 	add.w	r1, r7, #8
 8006340:	f107 030c 	add.w	r3, r7, #12
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd fefb 	bl	8004140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	9202      	str	r2, [sp, #8]
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	2302      	movs	r3, #2
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	460a      	mov	r2, r1
 800635c:	4910      	ldr	r1, [pc, #64]	; (80063a0 <xTimerCreateTimerTask+0x84>)
 800635e:	4811      	ldr	r0, [pc, #68]	; (80063a4 <xTimerCreateTimerTask+0x88>)
 8006360:	f7ff f8de 	bl	8005520 <xTaskCreateStatic>
 8006364:	4603      	mov	r3, r0
 8006366:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <xTimerCreateTimerTask+0x8c>)
 8006368:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <xTimerCreateTimerTask+0x8c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006372:	2301      	movs	r3, #1
 8006374:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	613b      	str	r3, [r7, #16]
}
 800638e:	bf00      	nop
 8006390:	e7fe      	b.n	8006390 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006392:	697b      	ldr	r3, [r7, #20]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	200049ec 	.word	0x200049ec
 80063a0:	08007520 	.word	0x08007520
 80063a4:	080064e1 	.word	0x080064e1
 80063a8:	200049f0 	.word	0x200049f0

080063ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	; 0x28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xTimerGenericCommand+0x2e>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	623b      	str	r3, [r7, #32]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063da:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <xTimerGenericCommand+0x98>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02a      	beq.n	8006438 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b05      	cmp	r3, #5
 80063f2:	dc18      	bgt.n	8006426 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063f4:	f7ff feb2 	bl	800615c <xTaskGetSchedulerState>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d109      	bne.n	8006412 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063fe:	4b11      	ldr	r3, [pc, #68]	; (8006444 <xTimerGenericCommand+0x98>)
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f107 0110 	add.w	r1, r7, #16
 8006406:	2300      	movs	r3, #0
 8006408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640a:	f7fe fca1 	bl	8004d50 <xQueueGenericSend>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24
 8006410:	e012      	b.n	8006438 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <xTimerGenericCommand+0x98>)
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f107 0110 	add.w	r1, r7, #16
 800641a:	2300      	movs	r3, #0
 800641c:	2200      	movs	r2, #0
 800641e:	f7fe fc97 	bl	8004d50 <xQueueGenericSend>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24
 8006424:	e008      	b.n	8006438 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <xTimerGenericCommand+0x98>)
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f107 0110 	add.w	r1, r7, #16
 800642e:	2300      	movs	r3, #0
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	f7fe fd8b 	bl	8004f4c <xQueueGenericSendFromISR>
 8006436:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800643a:	4618      	mov	r0, r3
 800643c:	3728      	adds	r7, #40	; 0x28
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200049ec 	.word	0x200049ec

08006448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006452:	4b22      	ldr	r3, [pc, #136]	; (80064dc <prvProcessExpiredTimer+0x94>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe f8fb 	bl	800465c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d022      	beq.n	80064ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	18d1      	adds	r1, r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	6978      	ldr	r0, [r7, #20]
 8006482:	f000 f8d1 	bl	8006628 <prvInsertTimerInActiveList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01f      	beq.n	80064cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800648c:	2300      	movs	r3, #0
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	2300      	movs	r3, #0
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	2100      	movs	r1, #0
 8006496:	6978      	ldr	r0, [r7, #20]
 8006498:	f7ff ff88 	bl	80063ac <xTimerGenericCommand>
 800649c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d113      	bne.n	80064cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	6978      	ldr	r0, [r7, #20]
 80064d2:	4798      	blx	r3
}
 80064d4:	bf00      	nop
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200049e4 	.word	0x200049e4

080064e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064e8:	f107 0308 	add.w	r3, r7, #8
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f857 	bl	80065a0 <prvGetNextExpireTime>
 80064f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f803 	bl	8006504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064fe:	f000 f8d5 	bl	80066ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006502:	e7f1      	b.n	80064e8 <prvTimerTask+0x8>

08006504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800650e:	f7ff fa43 	bl	8005998 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006512:	f107 0308 	add.w	r3, r7, #8
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f866 	bl	80065e8 <prvSampleTimeNow>
 800651c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d130      	bne.n	8006586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <prvProcessTimerOrBlockTask+0x3c>
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d806      	bhi.n	8006540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006532:	f7ff fa3f 	bl	80059b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff85 	bl	8006448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800653e:	e024      	b.n	800658a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <prvProcessTimerOrBlockTask+0x90>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <prvProcessTimerOrBlockTask+0x50>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <prvProcessTimerOrBlockTask+0x52>
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <prvProcessTimerOrBlockTask+0x94>)
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4619      	mov	r1, r3
 8006566:	f7fe ffa7 	bl	80054b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800656a:	f7ff fa23 	bl	80059b4 <xTaskResumeAll>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <prvProcessTimerOrBlockTask+0x98>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
}
 8006584:	e001      	b.n	800658a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006586:	f7ff fa15 	bl	80059b4 <xTaskResumeAll>
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	200049e8 	.word	0x200049e8
 8006598:	200049ec 	.word	0x200049ec
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065a8:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <prvGetNextExpireTime+0x44>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <prvGetNextExpireTime+0x16>
 80065b2:	2201      	movs	r2, #1
 80065b4:	e000      	b.n	80065b8 <prvGetNextExpireTime+0x18>
 80065b6:	2200      	movs	r2, #0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d105      	bne.n	80065d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <prvGetNextExpireTime+0x44>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e001      	b.n	80065d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	200049e4 	.word	0x200049e4

080065e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065f0:	f7ff fa7e 	bl	8005af0 <xTaskGetTickCount>
 80065f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <prvSampleTimeNow+0x3c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d205      	bcs.n	800660c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006600:	f000 f936 	bl	8006870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e002      	b.n	8006612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006612:	4a04      	ldr	r2, [pc, #16]	; (8006624 <prvSampleTimeNow+0x3c>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006618:	68fb      	ldr	r3, [r7, #12]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	200049f4 	.word	0x200049f4

08006628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d812      	bhi.n	8006674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e01b      	b.n	800669a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006662:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <prvInsertTimerInActiveList+0x7c>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7fd ffbc 	bl	80045ea <vListInsert>
 8006672:	e012      	b.n	800669a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d206      	bcs.n	800668a <prvInsertTimerInActiveList+0x62>
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e007      	b.n	800669a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <prvInsertTimerInActiveList+0x80>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fd ffa8 	bl	80045ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800669a:	697b      	ldr	r3, [r7, #20]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	200049e8 	.word	0x200049e8
 80066a8:	200049e4 	.word	0x200049e4

080066ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	; 0x38
 80066b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066b2:	e0ca      	b.n	800684a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	da18      	bge.n	80066ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	3304      	adds	r3, #4
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61fb      	str	r3, [r7, #28]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e2:	6850      	ldr	r0, [r2, #4]
 80066e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e6:	6892      	ldr	r2, [r2, #8]
 80066e8:	4611      	mov	r1, r2
 80066ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f2c0 80ab 	blt.w	800684a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	3304      	adds	r3, #4
 8006704:	4618      	mov	r0, r3
 8006706:	f7fd ffa9 	bl	800465c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800670a:	463b      	mov	r3, r7
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff6b 	bl	80065e8 <prvSampleTimeNow>
 8006712:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b09      	cmp	r3, #9
 8006718:	f200 8096 	bhi.w	8006848 <prvProcessReceivedCommands+0x19c>
 800671c:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <prvProcessReceivedCommands+0x78>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	0800674d 	.word	0x0800674d
 8006728:	0800674d 	.word	0x0800674d
 800672c:	0800674d 	.word	0x0800674d
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067d5 	.word	0x080067d5
 8006738:	0800681f 	.word	0x0800681f
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800674d 	.word	0x0800674d
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067d5 	.word	0x080067d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	18d1      	adds	r1, r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800676c:	f7ff ff5c 	bl	8006628 <prvInsertTimerInActiveList>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d069      	beq.n	800684a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800677c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d05e      	beq.n	800684a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	441a      	add	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2300      	movs	r3, #0
 800679a:	2100      	movs	r1, #0
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	f7ff fe05 	bl	80063ac <xTimerGenericCommand>
 80067a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d14f      	bne.n	800684a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	61bb      	str	r3, [r7, #24]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067d2:	e03a      	b.n	800684a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	617b      	str	r3, [r7, #20]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	18d1      	adds	r1, r2, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006818:	f7ff ff06 	bl	8006628 <prvInsertTimerInActiveList>
					break;
 800681c:	e015      	b.n	800684a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d103      	bne.n	8006834 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800682c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682e:	f7fd fd6d 	bl	800430c <vPortFree>
 8006832:	e00a      	b.n	800684a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006846:	e000      	b.n	800684a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <prvProcessReceivedCommands+0x1c0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	1d39      	adds	r1, r7, #4
 8006850:	2200      	movs	r2, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fc16 	bl	8005084 <xQueueReceive>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	f47f af2a 	bne.w	80066b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3730      	adds	r7, #48	; 0x30
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200049ec 	.word	0x200049ec

08006870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006876:	e048      	b.n	800690a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006878:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <prvSwitchTimerLists+0xc0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <prvSwitchTimerLists+0xc0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3304      	adds	r3, #4
 8006890:	4618      	mov	r0, r3
 8006892:	f7fd fee3 	bl	800465c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d02e      	beq.n	800690a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d90e      	bls.n	80068dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ca:	4b19      	ldr	r3, [pc, #100]	; (8006930 <prvSwitchTimerLists+0xc0>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fd fe88 	bl	80045ea <vListInsert>
 80068da:	e016      	b.n	800690a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068dc:	2300      	movs	r3, #0
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	2100      	movs	r1, #0
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7ff fd60 	bl	80063ac <xTimerGenericCommand>
 80068ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	603b      	str	r3, [r7, #0]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <prvSwitchTimerLists+0xc0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1b1      	bne.n	8006878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <prvSwitchTimerLists+0xc0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <prvSwitchTimerLists+0xc4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a04      	ldr	r2, [pc, #16]	; (8006930 <prvSwitchTimerLists+0xc0>)
 8006920:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006922:	4a04      	ldr	r2, [pc, #16]	; (8006934 <prvSwitchTimerLists+0xc4>)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	6013      	str	r3, [r2, #0]
}
 8006928:	bf00      	nop
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	200049e4 	.word	0x200049e4
 8006934:	200049e8 	.word	0x200049e8

08006938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800693e:	f7fd ffe1 	bl	8004904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <prvCheckForValidListAndQueue+0x60>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d120      	bne.n	800698c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800694a:	4814      	ldr	r0, [pc, #80]	; (800699c <prvCheckForValidListAndQueue+0x64>)
 800694c:	f7fd fdfc 	bl	8004548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006950:	4813      	ldr	r0, [pc, #76]	; (80069a0 <prvCheckForValidListAndQueue+0x68>)
 8006952:	f7fd fdf9 	bl	8004548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <prvCheckForValidListAndQueue+0x6c>)
 8006958:	4a10      	ldr	r2, [pc, #64]	; (800699c <prvCheckForValidListAndQueue+0x64>)
 800695a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800695c:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <prvCheckForValidListAndQueue+0x70>)
 800695e:	4a10      	ldr	r2, [pc, #64]	; (80069a0 <prvCheckForValidListAndQueue+0x68>)
 8006960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006962:	2300      	movs	r3, #0
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4b11      	ldr	r3, [pc, #68]	; (80069ac <prvCheckForValidListAndQueue+0x74>)
 8006968:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <prvCheckForValidListAndQueue+0x78>)
 800696a:	2110      	movs	r1, #16
 800696c:	200a      	movs	r0, #10
 800696e:	f7fe f953 	bl	8004c18 <xQueueGenericCreateStatic>
 8006972:	4603      	mov	r3, r0
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <prvCheckForValidListAndQueue+0x60>)
 8006976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <prvCheckForValidListAndQueue+0x60>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <prvCheckForValidListAndQueue+0x60>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	490b      	ldr	r1, [pc, #44]	; (80069b4 <prvCheckForValidListAndQueue+0x7c>)
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fd6c 	bl	8005464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800698c:	f7fd ffea 	bl	8004964 <vPortExitCritical>
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200049ec 	.word	0x200049ec
 800699c:	200049bc 	.word	0x200049bc
 80069a0:	200049d0 	.word	0x200049d0
 80069a4:	200049e4 	.word	0x200049e4
 80069a8:	200049e8 	.word	0x200049e8
 80069ac:	20004a98 	.word	0x20004a98
 80069b0:	200049f8 	.word	0x200049f8
 80069b4:	08007528 	.word	0x08007528

080069b8 <_ZdlPvj>:
 80069b8:	f000 b81a 	b.w	80069f0 <_ZdlPv>

080069bc <_Znwj>:
 80069bc:	2801      	cmp	r0, #1
 80069be:	bf38      	it	cc
 80069c0:	2001      	movcc	r0, #1
 80069c2:	b510      	push	{r4, lr}
 80069c4:	4604      	mov	r4, r0
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 f824 	bl	8006a14 <malloc>
 80069cc:	b100      	cbz	r0, 80069d0 <_Znwj+0x14>
 80069ce:	bd10      	pop	{r4, pc}
 80069d0:	f000 f810 	bl	80069f4 <_ZSt15get_new_handlerv>
 80069d4:	b908      	cbnz	r0, 80069da <_Znwj+0x1e>
 80069d6:	f000 f815 	bl	8006a04 <abort>
 80069da:	4780      	blx	r0
 80069dc:	e7f3      	b.n	80069c6 <_Znwj+0xa>

080069de <_ZSt17__throw_bad_allocv>:
 80069de:	b508      	push	{r3, lr}
 80069e0:	f000 f810 	bl	8006a04 <abort>

080069e4 <_ZSt28__throw_bad_array_new_lengthv>:
 80069e4:	b508      	push	{r3, lr}
 80069e6:	f000 f80d 	bl	8006a04 <abort>

080069ea <_ZSt20__throw_length_errorPKc>:
 80069ea:	b508      	push	{r3, lr}
 80069ec:	f000 f80a 	bl	8006a04 <abort>

080069f0 <_ZdlPv>:
 80069f0:	f000 b818 	b.w	8006a24 <free>

080069f4 <_ZSt15get_new_handlerv>:
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <_ZSt15get_new_handlerv+0xc>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f3bf 8f5b 	dmb	ish
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20004ae8 	.word	0x20004ae8

08006a04 <abort>:
 8006a04:	b508      	push	{r3, lr}
 8006a06:	2006      	movs	r0, #6
 8006a08:	f000 f92a 	bl	8006c60 <raise>
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f7fb fa19 	bl	8001e44 <_exit>
	...

08006a14 <malloc>:
 8006a14:	4b02      	ldr	r3, [pc, #8]	; (8006a20 <malloc+0xc>)
 8006a16:	4601      	mov	r1, r0
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	f000 b82b 	b.w	8006a74 <_malloc_r>
 8006a1e:	bf00      	nop
 8006a20:	2000005c 	.word	0x2000005c

08006a24 <free>:
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <free+0xc>)
 8006a26:	4601      	mov	r1, r0
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	f000 b97f 	b.w	8006d2c <_free_r>
 8006a2e:	bf00      	nop
 8006a30:	2000005c 	.word	0x2000005c

08006a34 <sbrk_aligned>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4e0e      	ldr	r6, [pc, #56]	; (8006a70 <sbrk_aligned+0x3c>)
 8006a38:	460c      	mov	r4, r1
 8006a3a:	6831      	ldr	r1, [r6, #0]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	b911      	cbnz	r1, 8006a46 <sbrk_aligned+0x12>
 8006a40:	f000 f92a 	bl	8006c98 <_sbrk_r>
 8006a44:	6030      	str	r0, [r6, #0]
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 f925 	bl	8006c98 <_sbrk_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d00a      	beq.n	8006a68 <sbrk_aligned+0x34>
 8006a52:	1cc4      	adds	r4, r0, #3
 8006a54:	f024 0403 	bic.w	r4, r4, #3
 8006a58:	42a0      	cmp	r0, r4
 8006a5a:	d007      	beq.n	8006a6c <sbrk_aligned+0x38>
 8006a5c:	1a21      	subs	r1, r4, r0
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f91a 	bl	8006c98 <_sbrk_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d101      	bne.n	8006a6c <sbrk_aligned+0x38>
 8006a68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	20004af0 	.word	0x20004af0

08006a74 <_malloc_r>:
 8006a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a78:	1ccd      	adds	r5, r1, #3
 8006a7a:	f025 0503 	bic.w	r5, r5, #3
 8006a7e:	3508      	adds	r5, #8
 8006a80:	2d0c      	cmp	r5, #12
 8006a82:	bf38      	it	cc
 8006a84:	250c      	movcc	r5, #12
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	4607      	mov	r7, r0
 8006a8a:	db01      	blt.n	8006a90 <_malloc_r+0x1c>
 8006a8c:	42a9      	cmp	r1, r5
 8006a8e:	d905      	bls.n	8006a9c <_malloc_r+0x28>
 8006a90:	230c      	movs	r3, #12
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	2600      	movs	r6, #0
 8006a96:	4630      	mov	r0, r6
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b70 <_malloc_r+0xfc>
 8006aa0:	f000 f868 	bl	8006b74 <__malloc_lock>
 8006aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8006aa8:	461c      	mov	r4, r3
 8006aaa:	bb5c      	cbnz	r4, 8006b04 <_malloc_r+0x90>
 8006aac:	4629      	mov	r1, r5
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f7ff ffc0 	bl	8006a34 <sbrk_aligned>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	d155      	bne.n	8006b66 <_malloc_r+0xf2>
 8006aba:	f8d8 4000 	ldr.w	r4, [r8]
 8006abe:	4626      	mov	r6, r4
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	d145      	bne.n	8006b50 <_malloc_r+0xdc>
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	d048      	beq.n	8006b5a <_malloc_r+0xe6>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	4631      	mov	r1, r6
 8006acc:	4638      	mov	r0, r7
 8006ace:	eb04 0903 	add.w	r9, r4, r3
 8006ad2:	f000 f8e1 	bl	8006c98 <_sbrk_r>
 8006ad6:	4581      	cmp	r9, r0
 8006ad8:	d13f      	bne.n	8006b5a <_malloc_r+0xe6>
 8006ada:	6821      	ldr	r1, [r4, #0]
 8006adc:	1a6d      	subs	r5, r5, r1
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f7ff ffa7 	bl	8006a34 <sbrk_aligned>
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d037      	beq.n	8006b5a <_malloc_r+0xe6>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	442b      	add	r3, r5
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	f8d8 3000 	ldr.w	r3, [r8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d038      	beq.n	8006b6a <_malloc_r+0xf6>
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	42a2      	cmp	r2, r4
 8006afc:	d12b      	bne.n	8006b56 <_malloc_r+0xe2>
 8006afe:	2200      	movs	r2, #0
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	e00f      	b.n	8006b24 <_malloc_r+0xb0>
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	1b52      	subs	r2, r2, r5
 8006b08:	d41f      	bmi.n	8006b4a <_malloc_r+0xd6>
 8006b0a:	2a0b      	cmp	r2, #11
 8006b0c:	d917      	bls.n	8006b3e <_malloc_r+0xca>
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	6025      	str	r5, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	6059      	strne	r1, [r3, #4]
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	bf08      	it	eq
 8006b1c:	f8c8 1000 	streq.w	r1, [r8]
 8006b20:	5162      	str	r2, [r4, r5]
 8006b22:	604b      	str	r3, [r1, #4]
 8006b24:	4638      	mov	r0, r7
 8006b26:	f104 060b 	add.w	r6, r4, #11
 8006b2a:	f000 f829 	bl	8006b80 <__malloc_unlock>
 8006b2e:	f026 0607 	bic.w	r6, r6, #7
 8006b32:	1d23      	adds	r3, r4, #4
 8006b34:	1af2      	subs	r2, r6, r3
 8006b36:	d0ae      	beq.n	8006a96 <_malloc_r+0x22>
 8006b38:	1b9b      	subs	r3, r3, r6
 8006b3a:	50a3      	str	r3, [r4, r2]
 8006b3c:	e7ab      	b.n	8006a96 <_malloc_r+0x22>
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	d1dd      	bne.n	8006b00 <_malloc_r+0x8c>
 8006b44:	f8c8 2000 	str.w	r2, [r8]
 8006b48:	e7ec      	b.n	8006b24 <_malloc_r+0xb0>
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	6864      	ldr	r4, [r4, #4]
 8006b4e:	e7ac      	b.n	8006aaa <_malloc_r+0x36>
 8006b50:	4634      	mov	r4, r6
 8006b52:	6876      	ldr	r6, [r6, #4]
 8006b54:	e7b4      	b.n	8006ac0 <_malloc_r+0x4c>
 8006b56:	4613      	mov	r3, r2
 8006b58:	e7cc      	b.n	8006af4 <_malloc_r+0x80>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f000 f80e 	bl	8006b80 <__malloc_unlock>
 8006b64:	e797      	b.n	8006a96 <_malloc_r+0x22>
 8006b66:	6025      	str	r5, [r4, #0]
 8006b68:	e7dc      	b.n	8006b24 <_malloc_r+0xb0>
 8006b6a:	605b      	str	r3, [r3, #4]
 8006b6c:	deff      	udf	#255	; 0xff
 8006b6e:	bf00      	nop
 8006b70:	20004aec 	.word	0x20004aec

08006b74 <__malloc_lock>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__malloc_lock+0x8>)
 8006b76:	f000 b8c9 	b.w	8006d0c <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20004c30 	.word	0x20004c30

08006b80 <__malloc_unlock>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__malloc_unlock+0x8>)
 8006b82:	f000 b8c4 	b.w	8006d0e <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	20004c30 	.word	0x20004c30

08006b8c <siprintf>:
 8006b8c:	b40e      	push	{r1, r2, r3}
 8006b8e:	b500      	push	{lr}
 8006b90:	b09c      	sub	sp, #112	; 0x70
 8006b92:	ab1d      	add	r3, sp, #116	; 0x74
 8006b94:	9002      	str	r0, [sp, #8]
 8006b96:	9006      	str	r0, [sp, #24]
 8006b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b9c:	4809      	ldr	r0, [pc, #36]	; (8006bc4 <siprintf+0x38>)
 8006b9e:	9107      	str	r1, [sp, #28]
 8006ba0:	9104      	str	r1, [sp, #16]
 8006ba2:	4909      	ldr	r1, [pc, #36]	; (8006bc8 <siprintf+0x3c>)
 8006ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba8:	9105      	str	r1, [sp, #20]
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	a902      	add	r1, sp, #8
 8006bb0:	f000 f962 	bl	8006e78 <_svfiprintf_r>
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	b01c      	add	sp, #112	; 0x70
 8006bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc0:	b003      	add	sp, #12
 8006bc2:	4770      	bx	lr
 8006bc4:	2000005c 	.word	0x2000005c
 8006bc8:	ffff0208 	.word	0xffff0208

08006bcc <memmove>:
 8006bcc:	4288      	cmp	r0, r1
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	eb01 0402 	add.w	r4, r1, r2
 8006bd4:	d902      	bls.n	8006bdc <memmove+0x10>
 8006bd6:	4284      	cmp	r4, r0
 8006bd8:	4623      	mov	r3, r4
 8006bda:	d807      	bhi.n	8006bec <memmove+0x20>
 8006bdc:	1e43      	subs	r3, r0, #1
 8006bde:	42a1      	cmp	r1, r4
 8006be0:	d008      	beq.n	8006bf4 <memmove+0x28>
 8006be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bea:	e7f8      	b.n	8006bde <memmove+0x12>
 8006bec:	4402      	add	r2, r0
 8006bee:	4601      	mov	r1, r0
 8006bf0:	428a      	cmp	r2, r1
 8006bf2:	d100      	bne.n	8006bf6 <memmove+0x2a>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bfe:	e7f7      	b.n	8006bf0 <memmove+0x24>

08006c00 <memset>:
 8006c00:	4402      	add	r2, r0
 8006c02:	4603      	mov	r3, r0
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d100      	bne.n	8006c0a <memset+0xa>
 8006c08:	4770      	bx	lr
 8006c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0e:	e7f9      	b.n	8006c04 <memset+0x4>

08006c10 <_raise_r>:
 8006c10:	291f      	cmp	r1, #31
 8006c12:	b538      	push	{r3, r4, r5, lr}
 8006c14:	4604      	mov	r4, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	d904      	bls.n	8006c24 <_raise_r+0x14>
 8006c1a:	2316      	movs	r3, #22
 8006c1c:	6003      	str	r3, [r0, #0]
 8006c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c26:	b112      	cbz	r2, 8006c2e <_raise_r+0x1e>
 8006c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c2c:	b94b      	cbnz	r3, 8006c42 <_raise_r+0x32>
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 f830 	bl	8006c94 <_getpid_r>
 8006c34:	462a      	mov	r2, r5
 8006c36:	4601      	mov	r1, r0
 8006c38:	4620      	mov	r0, r4
 8006c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c3e:	f000 b817 	b.w	8006c70 <_kill_r>
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d00a      	beq.n	8006c5c <_raise_r+0x4c>
 8006c46:	1c59      	adds	r1, r3, #1
 8006c48:	d103      	bne.n	8006c52 <_raise_r+0x42>
 8006c4a:	2316      	movs	r3, #22
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	2001      	movs	r0, #1
 8006c50:	e7e7      	b.n	8006c22 <_raise_r+0x12>
 8006c52:	2400      	movs	r4, #0
 8006c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c58:	4628      	mov	r0, r5
 8006c5a:	4798      	blx	r3
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	e7e0      	b.n	8006c22 <_raise_r+0x12>

08006c60 <raise>:
 8006c60:	4b02      	ldr	r3, [pc, #8]	; (8006c6c <raise+0xc>)
 8006c62:	4601      	mov	r1, r0
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	f7ff bfd3 	b.w	8006c10 <_raise_r>
 8006c6a:	bf00      	nop
 8006c6c:	2000005c 	.word	0x2000005c

08006c70 <_kill_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d07      	ldr	r5, [pc, #28]	; (8006c90 <_kill_r+0x20>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	602b      	str	r3, [r5, #0]
 8006c7e:	f7fb f8d1 	bl	8001e24 <_kill>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d102      	bne.n	8006c8c <_kill_r+0x1c>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	b103      	cbz	r3, 8006c8c <_kill_r+0x1c>
 8006c8a:	6023      	str	r3, [r4, #0]
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	bf00      	nop
 8006c90:	20004c2c 	.word	0x20004c2c

08006c94 <_getpid_r>:
 8006c94:	f7fb b8be 	b.w	8001e14 <_getpid>

08006c98 <_sbrk_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d06      	ldr	r5, [pc, #24]	; (8006cb4 <_sbrk_r+0x1c>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	f7fb f8d8 	bl	8001e58 <_sbrk>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_sbrk_r+0x1a>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_sbrk_r+0x1a>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20004c2c 	.word	0x20004c2c

08006cb8 <__errno>:
 8006cb8:	4b01      	ldr	r3, [pc, #4]	; (8006cc0 <__errno+0x8>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	2000005c 	.word	0x2000005c

08006cc4 <__libc_init_array>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4d0d      	ldr	r5, [pc, #52]	; (8006cfc <__libc_init_array+0x38>)
 8006cc8:	4c0d      	ldr	r4, [pc, #52]	; (8006d00 <__libc_init_array+0x3c>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	2600      	movs	r6, #0
 8006cd0:	42a6      	cmp	r6, r4
 8006cd2:	d109      	bne.n	8006ce8 <__libc_init_array+0x24>
 8006cd4:	4d0b      	ldr	r5, [pc, #44]	; (8006d04 <__libc_init_array+0x40>)
 8006cd6:	4c0c      	ldr	r4, [pc, #48]	; (8006d08 <__libc_init_array+0x44>)
 8006cd8:	f000 fb94 	bl	8007404 <_init>
 8006cdc:	1b64      	subs	r4, r4, r5
 8006cde:	10a4      	asrs	r4, r4, #2
 8006ce0:	2600      	movs	r6, #0
 8006ce2:	42a6      	cmp	r6, r4
 8006ce4:	d105      	bne.n	8006cf2 <__libc_init_array+0x2e>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cec:	4798      	blx	r3
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7ee      	b.n	8006cd0 <__libc_init_array+0xc>
 8006cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf6:	4798      	blx	r3
 8006cf8:	3601      	adds	r6, #1
 8006cfa:	e7f2      	b.n	8006ce2 <__libc_init_array+0x1e>
 8006cfc:	08007614 	.word	0x08007614
 8006d00:	08007614 	.word	0x08007614
 8006d04:	08007614 	.word	0x08007614
 8006d08:	0800761c 	.word	0x0800761c

08006d0c <__retarget_lock_acquire_recursive>:
 8006d0c:	4770      	bx	lr

08006d0e <__retarget_lock_release_recursive>:
 8006d0e:	4770      	bx	lr

08006d10 <memcpy>:
 8006d10:	440a      	add	r2, r1
 8006d12:	4291      	cmp	r1, r2
 8006d14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d18:	d100      	bne.n	8006d1c <memcpy+0xc>
 8006d1a:	4770      	bx	lr
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d26:	4291      	cmp	r1, r2
 8006d28:	d1f9      	bne.n	8006d1e <memcpy+0xe>
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <_free_r>:
 8006d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d2e:	2900      	cmp	r1, #0
 8006d30:	d044      	beq.n	8006dbc <_free_r+0x90>
 8006d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d36:	9001      	str	r0, [sp, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d3e:	bfb8      	it	lt
 8006d40:	18e4      	addlt	r4, r4, r3
 8006d42:	f7ff ff17 	bl	8006b74 <__malloc_lock>
 8006d46:	4a1e      	ldr	r2, [pc, #120]	; (8006dc0 <_free_r+0x94>)
 8006d48:	9801      	ldr	r0, [sp, #4]
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	b933      	cbnz	r3, 8006d5c <_free_r+0x30>
 8006d4e:	6063      	str	r3, [r4, #4]
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	b003      	add	sp, #12
 8006d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d58:	f7ff bf12 	b.w	8006b80 <__malloc_unlock>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d908      	bls.n	8006d72 <_free_r+0x46>
 8006d60:	6825      	ldr	r5, [r4, #0]
 8006d62:	1961      	adds	r1, r4, r5
 8006d64:	428b      	cmp	r3, r1
 8006d66:	bf01      	itttt	eq
 8006d68:	6819      	ldreq	r1, [r3, #0]
 8006d6a:	685b      	ldreq	r3, [r3, #4]
 8006d6c:	1949      	addeq	r1, r1, r5
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	e7ed      	b.n	8006d4e <_free_r+0x22>
 8006d72:	461a      	mov	r2, r3
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b10b      	cbz	r3, 8006d7c <_free_r+0x50>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d9fa      	bls.n	8006d72 <_free_r+0x46>
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	1855      	adds	r5, r2, r1
 8006d80:	42a5      	cmp	r5, r4
 8006d82:	d10b      	bne.n	8006d9c <_free_r+0x70>
 8006d84:	6824      	ldr	r4, [r4, #0]
 8006d86:	4421      	add	r1, r4
 8006d88:	1854      	adds	r4, r2, r1
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	d1e0      	bne.n	8006d52 <_free_r+0x26>
 8006d90:	681c      	ldr	r4, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	6053      	str	r3, [r2, #4]
 8006d96:	440c      	add	r4, r1
 8006d98:	6014      	str	r4, [r2, #0]
 8006d9a:	e7da      	b.n	8006d52 <_free_r+0x26>
 8006d9c:	d902      	bls.n	8006da4 <_free_r+0x78>
 8006d9e:	230c      	movs	r3, #12
 8006da0:	6003      	str	r3, [r0, #0]
 8006da2:	e7d6      	b.n	8006d52 <_free_r+0x26>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	1961      	adds	r1, r4, r5
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf04      	itt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	6063      	str	r3, [r4, #4]
 8006db2:	bf04      	itt	eq
 8006db4:	1949      	addeq	r1, r1, r5
 8006db6:	6021      	streq	r1, [r4, #0]
 8006db8:	6054      	str	r4, [r2, #4]
 8006dba:	e7ca      	b.n	8006d52 <_free_r+0x26>
 8006dbc:	b003      	add	sp, #12
 8006dbe:	bd30      	pop	{r4, r5, pc}
 8006dc0:	20004aec 	.word	0x20004aec

08006dc4 <__ssputs_r>:
 8006dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	688e      	ldr	r6, [r1, #8]
 8006dca:	461f      	mov	r7, r3
 8006dcc:	42be      	cmp	r6, r7
 8006dce:	680b      	ldr	r3, [r1, #0]
 8006dd0:	4682      	mov	sl, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	4690      	mov	r8, r2
 8006dd6:	d82c      	bhi.n	8006e32 <__ssputs_r+0x6e>
 8006dd8:	898a      	ldrh	r2, [r1, #12]
 8006dda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dde:	d026      	beq.n	8006e2e <__ssputs_r+0x6a>
 8006de0:	6965      	ldr	r5, [r4, #20]
 8006de2:	6909      	ldr	r1, [r1, #16]
 8006de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de8:	eba3 0901 	sub.w	r9, r3, r1
 8006dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006df0:	1c7b      	adds	r3, r7, #1
 8006df2:	444b      	add	r3, r9
 8006df4:	106d      	asrs	r5, r5, #1
 8006df6:	429d      	cmp	r5, r3
 8006df8:	bf38      	it	cc
 8006dfa:	461d      	movcc	r5, r3
 8006dfc:	0553      	lsls	r3, r2, #21
 8006dfe:	d527      	bpl.n	8006e50 <__ssputs_r+0x8c>
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7ff fe37 	bl	8006a74 <_malloc_r>
 8006e06:	4606      	mov	r6, r0
 8006e08:	b360      	cbz	r0, 8006e64 <__ssputs_r+0xa0>
 8006e0a:	6921      	ldr	r1, [r4, #16]
 8006e0c:	464a      	mov	r2, r9
 8006e0e:	f7ff ff7f 	bl	8006d10 <memcpy>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	6126      	str	r6, [r4, #16]
 8006e20:	6165      	str	r5, [r4, #20]
 8006e22:	444e      	add	r6, r9
 8006e24:	eba5 0509 	sub.w	r5, r5, r9
 8006e28:	6026      	str	r6, [r4, #0]
 8006e2a:	60a5      	str	r5, [r4, #8]
 8006e2c:	463e      	mov	r6, r7
 8006e2e:	42be      	cmp	r6, r7
 8006e30:	d900      	bls.n	8006e34 <__ssputs_r+0x70>
 8006e32:	463e      	mov	r6, r7
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	4632      	mov	r2, r6
 8006e38:	4641      	mov	r1, r8
 8006e3a:	f7ff fec7 	bl	8006bcc <memmove>
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	1b9b      	subs	r3, r3, r6
 8006e42:	60a3      	str	r3, [r4, #8]
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	4433      	add	r3, r6
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	462a      	mov	r2, r5
 8006e52:	f000 fa9f 	bl	8007394 <_realloc_r>
 8006e56:	4606      	mov	r6, r0
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1e0      	bne.n	8006e1e <__ssputs_r+0x5a>
 8006e5c:	6921      	ldr	r1, [r4, #16]
 8006e5e:	4650      	mov	r0, sl
 8006e60:	f7ff ff64 	bl	8006d2c <_free_r>
 8006e64:	230c      	movs	r3, #12
 8006e66:	f8ca 3000 	str.w	r3, [sl]
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e76:	e7e9      	b.n	8006e4c <__ssputs_r+0x88>

08006e78 <_svfiprintf_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	898b      	ldrh	r3, [r1, #12]
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	b09d      	sub	sp, #116	; 0x74
 8006e84:	4607      	mov	r7, r0
 8006e86:	460d      	mov	r5, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	d50e      	bpl.n	8006eaa <_svfiprintf_r+0x32>
 8006e8c:	690b      	ldr	r3, [r1, #16]
 8006e8e:	b963      	cbnz	r3, 8006eaa <_svfiprintf_r+0x32>
 8006e90:	2140      	movs	r1, #64	; 0x40
 8006e92:	f7ff fdef 	bl	8006a74 <_malloc_r>
 8006e96:	6028      	str	r0, [r5, #0]
 8006e98:	6128      	str	r0, [r5, #16]
 8006e9a:	b920      	cbnz	r0, 8006ea6 <_svfiprintf_r+0x2e>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea4:	e0d0      	b.n	8007048 <_svfiprintf_r+0x1d0>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	616b      	str	r3, [r5, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9309      	str	r3, [sp, #36]	; 0x24
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb8:	2330      	movs	r3, #48	; 0x30
 8006eba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007060 <_svfiprintf_r+0x1e8>
 8006ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ec2:	f04f 0901 	mov.w	r9, #1
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ece:	b10a      	cbz	r2, 8006ed4 <_svfiprintf_r+0x5c>
 8006ed0:	2a25      	cmp	r2, #37	; 0x25
 8006ed2:	d1f9      	bne.n	8006ec8 <_svfiprintf_r+0x50>
 8006ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed8:	d00b      	beq.n	8006ef2 <_svfiprintf_r+0x7a>
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ff6f 	bl	8006dc4 <__ssputs_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f000 80a9 	beq.w	800703e <_svfiprintf_r+0x1c6>
 8006eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eee:	445a      	add	r2, fp
 8006ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80a1 	beq.w	800703e <_svfiprintf_r+0x1c6>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f06:	f10a 0a01 	add.w	sl, sl, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f12:	931a      	str	r3, [sp, #104]	; 0x68
 8006f14:	4654      	mov	r4, sl
 8006f16:	2205      	movs	r2, #5
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	4850      	ldr	r0, [pc, #320]	; (8007060 <_svfiprintf_r+0x1e8>)
 8006f1e:	f7f9 f977 	bl	8000210 <memchr>
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_svfiprintf_r+0xe6>
 8006f26:	06d0      	lsls	r0, r2, #27
 8006f28:	bf44      	itt	mi
 8006f2a:	2320      	movmi	r3, #32
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f30:	0711      	lsls	r1, r2, #28
 8006f32:	bf44      	itt	mi
 8006f34:	232b      	movmi	r3, #43	; 0x2b
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f40:	d015      	beq.n	8006f6e <_svfiprintf_r+0xf6>
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	4654      	mov	r4, sl
 8006f46:	2000      	movs	r0, #0
 8006f48:	f04f 0c0a 	mov.w	ip, #10
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f52:	3b30      	subs	r3, #48	; 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d94d      	bls.n	8006ff4 <_svfiprintf_r+0x17c>
 8006f58:	b1b0      	cbz	r0, 8006f88 <_svfiprintf_r+0x110>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e014      	b.n	8006f88 <_svfiprintf_r+0x110>
 8006f5e:	eba0 0308 	sub.w	r3, r0, r8
 8006f62:	fa09 f303 	lsl.w	r3, r9, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	46a2      	mov	sl, r4
 8006f6c:	e7d2      	b.n	8006f14 <_svfiprintf_r+0x9c>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbb      	ittet	lt
 8006f7a:	425b      	neglt	r3, r3
 8006f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f80:	9307      	strge	r3, [sp, #28]
 8006f82:	9307      	strlt	r3, [sp, #28]
 8006f84:	bfb8      	it	lt
 8006f86:	9204      	strlt	r2, [sp, #16]
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8c:	d10c      	bne.n	8006fa8 <_svfiprintf_r+0x130>
 8006f8e:	7863      	ldrb	r3, [r4, #1]
 8006f90:	2b2a      	cmp	r3, #42	; 0x2a
 8006f92:	d134      	bne.n	8006ffe <_svfiprintf_r+0x186>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfb8      	it	lt
 8006fa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fa4:	3402      	adds	r4, #2
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007070 <_svfiprintf_r+0x1f8>
 8006fac:	7821      	ldrb	r1, [r4, #0]
 8006fae:	2203      	movs	r2, #3
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	f7f9 f92d 	bl	8000210 <memchr>
 8006fb6:	b138      	cbz	r0, 8006fc8 <_svfiprintf_r+0x150>
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	eba0 000a 	sub.w	r0, r0, sl
 8006fbe:	2240      	movs	r2, #64	; 0x40
 8006fc0:	4082      	lsls	r2, r0
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	3401      	adds	r4, #1
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fcc:	4825      	ldr	r0, [pc, #148]	; (8007064 <_svfiprintf_r+0x1ec>)
 8006fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd2:	2206      	movs	r2, #6
 8006fd4:	f7f9 f91c 	bl	8000210 <memchr>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d038      	beq.n	800704e <_svfiprintf_r+0x1d6>
 8006fdc:	4b22      	ldr	r3, [pc, #136]	; (8007068 <_svfiprintf_r+0x1f0>)
 8006fde:	bb1b      	cbnz	r3, 8007028 <_svfiprintf_r+0x1b0>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	3307      	adds	r3, #7
 8006fe4:	f023 0307 	bic.w	r3, r3, #7
 8006fe8:	3308      	adds	r3, #8
 8006fea:	9303      	str	r3, [sp, #12]
 8006fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fee:	4433      	add	r3, r6
 8006ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff2:	e768      	b.n	8006ec6 <_svfiprintf_r+0x4e>
 8006ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	e7a6      	b.n	8006f4c <_svfiprintf_r+0xd4>
 8006ffe:	2300      	movs	r3, #0
 8007000:	3401      	adds	r4, #1
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	4619      	mov	r1, r3
 8007006:	f04f 0c0a 	mov.w	ip, #10
 800700a:	4620      	mov	r0, r4
 800700c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007010:	3a30      	subs	r2, #48	; 0x30
 8007012:	2a09      	cmp	r2, #9
 8007014:	d903      	bls.n	800701e <_svfiprintf_r+0x1a6>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0c6      	beq.n	8006fa8 <_svfiprintf_r+0x130>
 800701a:	9105      	str	r1, [sp, #20]
 800701c:	e7c4      	b.n	8006fa8 <_svfiprintf_r+0x130>
 800701e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007022:	4604      	mov	r4, r0
 8007024:	2301      	movs	r3, #1
 8007026:	e7f0      	b.n	800700a <_svfiprintf_r+0x192>
 8007028:	ab03      	add	r3, sp, #12
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	462a      	mov	r2, r5
 800702e:	4b0f      	ldr	r3, [pc, #60]	; (800706c <_svfiprintf_r+0x1f4>)
 8007030:	a904      	add	r1, sp, #16
 8007032:	4638      	mov	r0, r7
 8007034:	f3af 8000 	nop.w
 8007038:	1c42      	adds	r2, r0, #1
 800703a:	4606      	mov	r6, r0
 800703c:	d1d6      	bne.n	8006fec <_svfiprintf_r+0x174>
 800703e:	89ab      	ldrh	r3, [r5, #12]
 8007040:	065b      	lsls	r3, r3, #25
 8007042:	f53f af2d 	bmi.w	8006ea0 <_svfiprintf_r+0x28>
 8007046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007048:	b01d      	add	sp, #116	; 0x74
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	ab03      	add	r3, sp, #12
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	462a      	mov	r2, r5
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <_svfiprintf_r+0x1f4>)
 8007056:	a904      	add	r1, sp, #16
 8007058:	4638      	mov	r0, r7
 800705a:	f000 f879 	bl	8007150 <_printf_i>
 800705e:	e7eb      	b.n	8007038 <_svfiprintf_r+0x1c0>
 8007060:	080075d8 	.word	0x080075d8
 8007064:	080075e2 	.word	0x080075e2
 8007068:	00000000 	.word	0x00000000
 800706c:	08006dc5 	.word	0x08006dc5
 8007070:	080075de 	.word	0x080075de

08007074 <_printf_common>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	4616      	mov	r6, r2
 800707a:	4699      	mov	r9, r3
 800707c:	688a      	ldr	r2, [r1, #8]
 800707e:	690b      	ldr	r3, [r1, #16]
 8007080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007084:	4293      	cmp	r3, r2
 8007086:	bfb8      	it	lt
 8007088:	4613      	movlt	r3, r2
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007090:	4607      	mov	r7, r0
 8007092:	460c      	mov	r4, r1
 8007094:	b10a      	cbz	r2, 800709a <_printf_common+0x26>
 8007096:	3301      	adds	r3, #1
 8007098:	6033      	str	r3, [r6, #0]
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	0699      	lsls	r1, r3, #26
 800709e:	bf42      	ittt	mi
 80070a0:	6833      	ldrmi	r3, [r6, #0]
 80070a2:	3302      	addmi	r3, #2
 80070a4:	6033      	strmi	r3, [r6, #0]
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	f015 0506 	ands.w	r5, r5, #6
 80070ac:	d106      	bne.n	80070bc <_printf_common+0x48>
 80070ae:	f104 0a19 	add.w	sl, r4, #25
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	6832      	ldr	r2, [r6, #0]
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	dc26      	bgt.n	800710a <_printf_common+0x96>
 80070bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070c0:	1e13      	subs	r3, r2, #0
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	0692      	lsls	r2, r2, #26
 80070ca:	d42b      	bmi.n	8007124 <_printf_common+0xb0>
 80070cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d0:	4649      	mov	r1, r9
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	3001      	adds	r0, #1
 80070d8:	d01e      	beq.n	8007118 <_printf_common+0xa4>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	f003 0306 	and.w	r3, r3, #6
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	bf02      	ittt	eq
 80070e6:	68e5      	ldreq	r5, [r4, #12]
 80070e8:	6833      	ldreq	r3, [r6, #0]
 80070ea:	1aed      	subeq	r5, r5, r3
 80070ec:	68a3      	ldr	r3, [r4, #8]
 80070ee:	bf0c      	ite	eq
 80070f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f4:	2500      	movne	r5, #0
 80070f6:	4293      	cmp	r3, r2
 80070f8:	bfc4      	itt	gt
 80070fa:	1a9b      	subgt	r3, r3, r2
 80070fc:	18ed      	addgt	r5, r5, r3
 80070fe:	2600      	movs	r6, #0
 8007100:	341a      	adds	r4, #26
 8007102:	42b5      	cmp	r5, r6
 8007104:	d11a      	bne.n	800713c <_printf_common+0xc8>
 8007106:	2000      	movs	r0, #0
 8007108:	e008      	b.n	800711c <_printf_common+0xa8>
 800710a:	2301      	movs	r3, #1
 800710c:	4652      	mov	r2, sl
 800710e:	4649      	mov	r1, r9
 8007110:	4638      	mov	r0, r7
 8007112:	47c0      	blx	r8
 8007114:	3001      	adds	r0, #1
 8007116:	d103      	bne.n	8007120 <_printf_common+0xac>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	3501      	adds	r5, #1
 8007122:	e7c6      	b.n	80070b2 <_printf_common+0x3e>
 8007124:	18e1      	adds	r1, r4, r3
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	2030      	movs	r0, #48	; 0x30
 800712a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800712e:	4422      	add	r2, r4
 8007130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007138:	3302      	adds	r3, #2
 800713a:	e7c7      	b.n	80070cc <_printf_common+0x58>
 800713c:	2301      	movs	r3, #1
 800713e:	4622      	mov	r2, r4
 8007140:	4649      	mov	r1, r9
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	3001      	adds	r0, #1
 8007148:	d0e6      	beq.n	8007118 <_printf_common+0xa4>
 800714a:	3601      	adds	r6, #1
 800714c:	e7d9      	b.n	8007102 <_printf_common+0x8e>
	...

08007150 <_printf_i>:
 8007150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	7e0f      	ldrb	r7, [r1, #24]
 8007156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007158:	2f78      	cmp	r7, #120	; 0x78
 800715a:	4691      	mov	r9, r2
 800715c:	4680      	mov	r8, r0
 800715e:	460c      	mov	r4, r1
 8007160:	469a      	mov	sl, r3
 8007162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007166:	d807      	bhi.n	8007178 <_printf_i+0x28>
 8007168:	2f62      	cmp	r7, #98	; 0x62
 800716a:	d80a      	bhi.n	8007182 <_printf_i+0x32>
 800716c:	2f00      	cmp	r7, #0
 800716e:	f000 80d4 	beq.w	800731a <_printf_i+0x1ca>
 8007172:	2f58      	cmp	r7, #88	; 0x58
 8007174:	f000 80c0 	beq.w	80072f8 <_printf_i+0x1a8>
 8007178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800717c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007180:	e03a      	b.n	80071f8 <_printf_i+0xa8>
 8007182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007186:	2b15      	cmp	r3, #21
 8007188:	d8f6      	bhi.n	8007178 <_printf_i+0x28>
 800718a:	a101      	add	r1, pc, #4	; (adr r1, 8007190 <_printf_i+0x40>)
 800718c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007190:	080071e9 	.word	0x080071e9
 8007194:	080071fd 	.word	0x080071fd
 8007198:	08007179 	.word	0x08007179
 800719c:	08007179 	.word	0x08007179
 80071a0:	08007179 	.word	0x08007179
 80071a4:	08007179 	.word	0x08007179
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007179 	.word	0x08007179
 80071b0:	08007179 	.word	0x08007179
 80071b4:	08007179 	.word	0x08007179
 80071b8:	08007179 	.word	0x08007179
 80071bc:	08007301 	.word	0x08007301
 80071c0:	08007229 	.word	0x08007229
 80071c4:	080072bb 	.word	0x080072bb
 80071c8:	08007179 	.word	0x08007179
 80071cc:	08007179 	.word	0x08007179
 80071d0:	08007323 	.word	0x08007323
 80071d4:	08007179 	.word	0x08007179
 80071d8:	08007229 	.word	0x08007229
 80071dc:	08007179 	.word	0x08007179
 80071e0:	08007179 	.word	0x08007179
 80071e4:	080072c3 	.word	0x080072c3
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	602a      	str	r2, [r5, #0]
 80071f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f8:	2301      	movs	r3, #1
 80071fa:	e09f      	b.n	800733c <_printf_i+0x1ec>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	0607      	lsls	r7, r0, #24
 8007202:	f103 0104 	add.w	r1, r3, #4
 8007206:	6029      	str	r1, [r5, #0]
 8007208:	d501      	bpl.n	800720e <_printf_i+0xbe>
 800720a:	681e      	ldr	r6, [r3, #0]
 800720c:	e003      	b.n	8007216 <_printf_i+0xc6>
 800720e:	0646      	lsls	r6, r0, #25
 8007210:	d5fb      	bpl.n	800720a <_printf_i+0xba>
 8007212:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007216:	2e00      	cmp	r6, #0
 8007218:	da03      	bge.n	8007222 <_printf_i+0xd2>
 800721a:	232d      	movs	r3, #45	; 0x2d
 800721c:	4276      	negs	r6, r6
 800721e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007222:	485a      	ldr	r0, [pc, #360]	; (800738c <_printf_i+0x23c>)
 8007224:	230a      	movs	r3, #10
 8007226:	e012      	b.n	800724e <_printf_i+0xfe>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	6820      	ldr	r0, [r4, #0]
 800722c:	1d19      	adds	r1, r3, #4
 800722e:	6029      	str	r1, [r5, #0]
 8007230:	0605      	lsls	r5, r0, #24
 8007232:	d501      	bpl.n	8007238 <_printf_i+0xe8>
 8007234:	681e      	ldr	r6, [r3, #0]
 8007236:	e002      	b.n	800723e <_printf_i+0xee>
 8007238:	0641      	lsls	r1, r0, #25
 800723a:	d5fb      	bpl.n	8007234 <_printf_i+0xe4>
 800723c:	881e      	ldrh	r6, [r3, #0]
 800723e:	4853      	ldr	r0, [pc, #332]	; (800738c <_printf_i+0x23c>)
 8007240:	2f6f      	cmp	r7, #111	; 0x6f
 8007242:	bf0c      	ite	eq
 8007244:	2308      	moveq	r3, #8
 8007246:	230a      	movne	r3, #10
 8007248:	2100      	movs	r1, #0
 800724a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800724e:	6865      	ldr	r5, [r4, #4]
 8007250:	60a5      	str	r5, [r4, #8]
 8007252:	2d00      	cmp	r5, #0
 8007254:	bfa2      	ittt	ge
 8007256:	6821      	ldrge	r1, [r4, #0]
 8007258:	f021 0104 	bicge.w	r1, r1, #4
 800725c:	6021      	strge	r1, [r4, #0]
 800725e:	b90e      	cbnz	r6, 8007264 <_printf_i+0x114>
 8007260:	2d00      	cmp	r5, #0
 8007262:	d04b      	beq.n	80072fc <_printf_i+0x1ac>
 8007264:	4615      	mov	r5, r2
 8007266:	fbb6 f1f3 	udiv	r1, r6, r3
 800726a:	fb03 6711 	mls	r7, r3, r1, r6
 800726e:	5dc7      	ldrb	r7, [r0, r7]
 8007270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007274:	4637      	mov	r7, r6
 8007276:	42bb      	cmp	r3, r7
 8007278:	460e      	mov	r6, r1
 800727a:	d9f4      	bls.n	8007266 <_printf_i+0x116>
 800727c:	2b08      	cmp	r3, #8
 800727e:	d10b      	bne.n	8007298 <_printf_i+0x148>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	07de      	lsls	r6, r3, #31
 8007284:	d508      	bpl.n	8007298 <_printf_i+0x148>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	6861      	ldr	r1, [r4, #4]
 800728a:	4299      	cmp	r1, r3
 800728c:	bfde      	ittt	le
 800728e:	2330      	movle	r3, #48	; 0x30
 8007290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007294:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007298:	1b52      	subs	r2, r2, r5
 800729a:	6122      	str	r2, [r4, #16]
 800729c:	f8cd a000 	str.w	sl, [sp]
 80072a0:	464b      	mov	r3, r9
 80072a2:	aa03      	add	r2, sp, #12
 80072a4:	4621      	mov	r1, r4
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7ff fee4 	bl	8007074 <_printf_common>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d14a      	bne.n	8007346 <_printf_i+0x1f6>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b4:	b004      	add	sp, #16
 80072b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f043 0320 	orr.w	r3, r3, #32
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	4833      	ldr	r0, [pc, #204]	; (8007390 <_printf_i+0x240>)
 80072c4:	2778      	movs	r7, #120	; 0x78
 80072c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	6829      	ldr	r1, [r5, #0]
 80072ce:	061f      	lsls	r7, r3, #24
 80072d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80072d4:	d402      	bmi.n	80072dc <_printf_i+0x18c>
 80072d6:	065f      	lsls	r7, r3, #25
 80072d8:	bf48      	it	mi
 80072da:	b2b6      	uxthmi	r6, r6
 80072dc:	07df      	lsls	r7, r3, #31
 80072de:	bf48      	it	mi
 80072e0:	f043 0320 	orrmi.w	r3, r3, #32
 80072e4:	6029      	str	r1, [r5, #0]
 80072e6:	bf48      	it	mi
 80072e8:	6023      	strmi	r3, [r4, #0]
 80072ea:	b91e      	cbnz	r6, 80072f4 <_printf_i+0x1a4>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	f023 0320 	bic.w	r3, r3, #32
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	2310      	movs	r3, #16
 80072f6:	e7a7      	b.n	8007248 <_printf_i+0xf8>
 80072f8:	4824      	ldr	r0, [pc, #144]	; (800738c <_printf_i+0x23c>)
 80072fa:	e7e4      	b.n	80072c6 <_printf_i+0x176>
 80072fc:	4615      	mov	r5, r2
 80072fe:	e7bd      	b.n	800727c <_printf_i+0x12c>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	6826      	ldr	r6, [r4, #0]
 8007304:	6961      	ldr	r1, [r4, #20]
 8007306:	1d18      	adds	r0, r3, #4
 8007308:	6028      	str	r0, [r5, #0]
 800730a:	0635      	lsls	r5, r6, #24
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	d501      	bpl.n	8007314 <_printf_i+0x1c4>
 8007310:	6019      	str	r1, [r3, #0]
 8007312:	e002      	b.n	800731a <_printf_i+0x1ca>
 8007314:	0670      	lsls	r0, r6, #25
 8007316:	d5fb      	bpl.n	8007310 <_printf_i+0x1c0>
 8007318:	8019      	strh	r1, [r3, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	4615      	mov	r5, r2
 8007320:	e7bc      	b.n	800729c <_printf_i+0x14c>
 8007322:	682b      	ldr	r3, [r5, #0]
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	2100      	movs	r1, #0
 800732e:	4628      	mov	r0, r5
 8007330:	f7f8 ff6e 	bl	8000210 <memchr>
 8007334:	b108      	cbz	r0, 800733a <_printf_i+0x1ea>
 8007336:	1b40      	subs	r0, r0, r5
 8007338:	6060      	str	r0, [r4, #4]
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	2300      	movs	r3, #0
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007344:	e7aa      	b.n	800729c <_printf_i+0x14c>
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	462a      	mov	r2, r5
 800734a:	4649      	mov	r1, r9
 800734c:	4640      	mov	r0, r8
 800734e:	47d0      	blx	sl
 8007350:	3001      	adds	r0, #1
 8007352:	d0ad      	beq.n	80072b0 <_printf_i+0x160>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	079b      	lsls	r3, r3, #30
 8007358:	d413      	bmi.n	8007382 <_printf_i+0x232>
 800735a:	68e0      	ldr	r0, [r4, #12]
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	4298      	cmp	r0, r3
 8007360:	bfb8      	it	lt
 8007362:	4618      	movlt	r0, r3
 8007364:	e7a6      	b.n	80072b4 <_printf_i+0x164>
 8007366:	2301      	movs	r3, #1
 8007368:	4632      	mov	r2, r6
 800736a:	4649      	mov	r1, r9
 800736c:	4640      	mov	r0, r8
 800736e:	47d0      	blx	sl
 8007370:	3001      	adds	r0, #1
 8007372:	d09d      	beq.n	80072b0 <_printf_i+0x160>
 8007374:	3501      	adds	r5, #1
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	9903      	ldr	r1, [sp, #12]
 800737a:	1a5b      	subs	r3, r3, r1
 800737c:	42ab      	cmp	r3, r5
 800737e:	dcf2      	bgt.n	8007366 <_printf_i+0x216>
 8007380:	e7eb      	b.n	800735a <_printf_i+0x20a>
 8007382:	2500      	movs	r5, #0
 8007384:	f104 0619 	add.w	r6, r4, #25
 8007388:	e7f5      	b.n	8007376 <_printf_i+0x226>
 800738a:	bf00      	nop
 800738c:	080075e9 	.word	0x080075e9
 8007390:	080075fa 	.word	0x080075fa

08007394 <_realloc_r>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	4680      	mov	r8, r0
 800739a:	4614      	mov	r4, r2
 800739c:	460e      	mov	r6, r1
 800739e:	b921      	cbnz	r1, 80073aa <_realloc_r+0x16>
 80073a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	4611      	mov	r1, r2
 80073a6:	f7ff bb65 	b.w	8006a74 <_malloc_r>
 80073aa:	b92a      	cbnz	r2, 80073b8 <_realloc_r+0x24>
 80073ac:	f7ff fcbe 	bl	8006d2c <_free_r>
 80073b0:	4625      	mov	r5, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b8:	f000 f81b 	bl	80073f2 <_malloc_usable_size_r>
 80073bc:	4284      	cmp	r4, r0
 80073be:	4607      	mov	r7, r0
 80073c0:	d802      	bhi.n	80073c8 <_realloc_r+0x34>
 80073c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073c6:	d812      	bhi.n	80073ee <_realloc_r+0x5a>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff fb52 	bl	8006a74 <_malloc_r>
 80073d0:	4605      	mov	r5, r0
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d0ed      	beq.n	80073b2 <_realloc_r+0x1e>
 80073d6:	42bc      	cmp	r4, r7
 80073d8:	4622      	mov	r2, r4
 80073da:	4631      	mov	r1, r6
 80073dc:	bf28      	it	cs
 80073de:	463a      	movcs	r2, r7
 80073e0:	f7ff fc96 	bl	8006d10 <memcpy>
 80073e4:	4631      	mov	r1, r6
 80073e6:	4640      	mov	r0, r8
 80073e8:	f7ff fca0 	bl	8006d2c <_free_r>
 80073ec:	e7e1      	b.n	80073b2 <_realloc_r+0x1e>
 80073ee:	4635      	mov	r5, r6
 80073f0:	e7df      	b.n	80073b2 <_realloc_r+0x1e>

080073f2 <_malloc_usable_size_r>:
 80073f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f6:	1f18      	subs	r0, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfbc      	itt	lt
 80073fc:	580b      	ldrlt	r3, [r1, r0]
 80073fe:	18c0      	addlt	r0, r0, r3
 8007400:	4770      	bx	lr
	...

08007404 <_init>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr

08007410 <_fini>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr
